  _____   _____                 
 |  __ \ / ____|                
 | |__) | (___  _ __   ___  ___ 
 |  _  / \___ \| '_ \ / _ \/ __|
 | | \ \ ____) | |_) |  __/ (__ 
 |_|  \_\_____/| .__/ \___|\___|
 | \ | |     | | |              
 |  \| | ___ | |_|___  ___      
 | . ` |/ _ \| __/ _ \/ __|     
 | |\  | (_) | ||  __/\__ \     
 |_| \_|\___/ \__\___||___/     

TABLE OF CONTENTS 
1SSSS    intro
2SSSS    new section
3SSSS    Basic syntax
4SSSS    Writing Specs
5SSSS    Matchers
6SSSS    Test doubles (mocks)
7SSSS    Stubbing
8SSSS    Hooks 
9SSSS    Tags 
10SSSS    Subjects 
11SSSS    helpers
12SSSS    metadata
13SSSS    Filtering
14SSSS    Expectations 
15SSSS    Testing random stuff 



==============================================================
1SSSS     intro
==============================================================
**What is RSpec?**
 -RSpec is a unit test framework for the Ruby programming 
  language. 
 -RSpec is a Behavior driven development tool. 
 -this means rspec focuses on what gets done, not how
 -RSpec is a DSL, a Domain Specific Language, which means
  its built atop Ruby to add extra functionality


==============================================================
2SSSS    new section
==============================================================


**RSpec Environment**
 -rspec is a ruby gem so install with:

    $ gem install rspec
 
 -in linux you ,ight need sudo


**Hello World**
 -To get started, let’s create a directory (folder) to store 
  our RSpec files. 
 -make a folder for your project, then in that folder make a 
  "spec" folder
 -We are going to store our RSpec files in this folder. 
 -RSpec files are known as “specs”, whigh stands for 
  specifications

 -Since, RSpec is a BDD test tool, the goal is to focus on 
  what the application does and whether or not it follows 
 -this is becayse rspec is testing whether program meets a
  behavioral specification, oft described as a"user story"
 -inside practice/spec make a file hello_spec.rb and put:

    class HelloWorld

       def say_hello 
          "Hello World!"
       end
       
    end

    describe HelloWorld do 
       context “When testing the HelloWorld class” do 
          
          it "says 'Hello World' when we call the method" do 
             hw = HelloWorld.new 
             message = hw.say_hello 
             expect(message).to eq "Hello World!"
          end
          
       end
    end

 -then back in terminal:
 
    $ rspec spec spec\hello_world_spec.rb

 -which should put this:

    Finished in 0.002 sec (files took0101 seconds to load) 
    1 example, 0 failures


==============================================================
3SSSS    Basic syntax
==============================================================
 -Here is the RSpec code again −

    describe HelloWorld do 
       context “When testing the HelloWorld class” do 
          
          it "it should return 'Hello World'" do 
             hw = HelloWorld.new 
             message = hw.say_hello 
             expect(message).to eq "Hello World!" 
          end
          
       end 
    end

 -that is the main test section, the hello world function
  is whats getting tested
 -code being tested would normally be its own file
  as we see later how to do

**The describe Keyword**
 -The word "describe" is an RSpec keyword. It is used to 
  define an “Example Group”. 
 -an “Example Group” as a collection of tests. 
 -The describe keyword can take a class name and/or string
  argument. 
 -You also need to pass a block argument to describe,
  this will contain the individual tests, or as they are 
  known in RSpec, the “Examples”. 
 -The block is just a Ruby block designated by the 
  Ruby do/end keywords.

**The context Keyword**
 -The context keyword is similar to describe. 
 -It too can accept a class name and/or string argument. 
  and the code goes in a block
 -The idea of context is that it encloses tests of a 
  certain type.

 -For example: 

context “passing bad parameters to the foobar() method” 
context “passing valid parameters to the foobar() method” 
context “testing corner cases with the foobar() method”

 -The context keyword is not mandatory, but it helps to 
  add more details about the examples that it contains.

**The it Keyword**
 -The word it is another RSpec keyword which is used to 
  define an “Example”. 
 -to only pass a string and block argument. 
 -The string argument often uses the word “should” and
  describes what should happen inside the it block. 
 -the block contains the actual code that will test your
  program 

**The expect Keyword**
 -The expect keyword is used to define an “Expectation” 
  in RSpec. 
 -This is a verification step where we check
  that a specific expected condition has been met.

    expect(message).to eq "Hello World!"
 
 -as you can see RSpec tries to be read aloud easily


**The to keyword**
 -The to keyword is used as part of expect statements. 
 -Note that you can also use the not_to keyword 
  to express the opposite 
 -You can see that to is used with a dot, 
   
    expect(message).to, because it actually just a 

  because it is just a regular Ruby method #to
 -In fact, all of the RSpec keywords are really just Ruby 
  methods.

**The eq keyword**
 -The eq keyword is a special RSpec keyword called a Matcher.
 -You use Matchers to specify what type of condition you are 
  testing to be true (or false).
 -so in our example clearly we are testing to see if the 
  putput matches the string
 -there are different types of equality operators in Ruby 
  and consequently different Matchers in RSpec. 







==============================================================
4SSSS    Writing Specs
==============================================================
**testing a separate file**
 -here's the code example in a different file, it returns true
  if there are any vowels in the string

    class StringAnalyzer 
       def has_vowels?(str) 
          !!(str =~ /[aeio]+/i) 
       end 
    end

 -save this in a file string_analyzer.rb in the spec folder
 -Here is the source for our spec file to test StringAnalyzer:

  require 'string_analyzer' 

  describe StringAnalyzer do 
     context "With valid input" do 
        
        it "should detect when a string contains vowels" do 
           sa = StringAnalyzer.new 
           test_string = 'uuu' 
           expect(sa.has_vowels? test_string).to be true 
        end 
      
        it "should know if a string doesn't contain vowels" do 
           sa = StringAnalyzer.new 
           test_string = 'bcdfg' 
           expect(sa.has_vowels? test_string).to be false
        end 
        
     end 
  end
 -Save this in the same spec directory, giving it the name 
  string_analyzer_spec.rb.
 -all spec files must end in _spec.rb, this is how rspec knows
  to run and test with those files 
 -cd out of the spec folder, then do: 

    $ rspec spec 

 -it will run all the tests in the folder and show you the 
  failures 
 -you could also specify a specific file and not the entire 
  folder, if you have more varied tests. 
 -(In this example you will fail because in the code your list
  of vowels does not include "u", add that, save, then run 
  tests again to pass) 

**good test questions**
 -so if you're looking for vowels, here are some good tests
  to run to really get all the use cases:
Input string	Description	Expected resultdd with has_vowels?
  (input strings)
  (description)
  (return value)

  ‘aaa’, ‘eee’, ‘iii’, ‘o’
  Only one vowel and no other letters.	
  true

  ‘abcefg’	
  ‘At least one vowel and some consonants’	
  true

  ‘mnklp’	
  Only consonants.	
  false

  ‘’	
  Empty string (no letters)	
  false

  ‘abcde55345&??’	
  Vowels, consonants, numbers and punctuation characters.	
  true

‘423432%^&’	Numbers and punctuation characters only.	false
‘AEIOU’	Upper case vowels only.	true
‘AeiOuuuA’	Upper case and lower vowels only.	true
‘AbCdEfghI’	Upper and lower case vowels and consonants.	true
‘BCDFG’	Upper case consonants only.	false
‘ ‘	Whitespace characters only.	false

//////////////////////////////////////////////////////////////
**options/flags for rspec**
 -The rspec command offers many different options, to see them 
  all, type rspec -help. 
 -The following table lists the most popular options and 
  describes what they do.

Option/flag & Description
-f, --format FORMATTER
  This option allows you to specify different output formats. 
  See the section on Formatters for more details about output 
  formats.
 here are the two main ones:

-fd  // d stands for documentation
  this is the formatting option that learn.co seems to use,
  it displays all tests, with passed ones in green, and failed
  ones in red, but both types fully display describe and 
  context 
 here are the two main ones:

-fp // p stands for progress
  this is the default behavior of RSpec, it will just put
  green dot for each passed test and a "F" for failed tests.
  the only place to see the details of failed tests is below
  the F and dots in the "Failures:" section.
  -this is the default behavior so you don't need to specify

-I PATH
  Adds PATH to the load (require) path that rspec uses when 
  looking for Ruby source files.

-r, --require PATH
  Adds a specific source file to be required in your spec. 
  file(s).

--fail-fast
  With this option, rspec will stop running specs after the 
  first Example fails. By default, rspec runs all specified 
  spec files, no matter how many failures there are.


-o, --out FILE

  This option directs rspec to write the test results to the 
  output file FILE instead of to standard out.

-c, --color
  Enables color in rspec’s output. Successful Example results 
  will display in green text, failures will print in red text.
  seems to be default

-b, --backtrace
  Displays full error backtraces in rspec’s output.

-w, --warnings
  Displays Ruby warnings in rspec’s output.

-P, --pattern PATTERN
  Load and run spec files that match the pattern PATTERN. For 
  example, if you pass -p “*.rb”, rspec will run all Ruby 
  files, not just the ones that end in “_spec.rb”.

-e, --example STRING
  This option directs rspec to run all Examples that contain 
  the text STRING in their descriptions.

-t, --tag TAG
  With this option, rspec will only run examples that contain 
  the tag TAG. Note that TAG is specified as a Ruby symbol. 
  See the section on RSpec Tags for more details.







==============================================================
5SSSS    Matchers
==============================================================
 -here are some of the matchers (the part that tests whether
  or not the value from .expect is equal)

  eq	
  Passes when actual == expected	
  ex: expect(actual).to eq expected

  eql	
  Passes when actual.eql?(expected)	
  ex: expect(actual).to eql expected

  be	
  Passes when actual.equal?(expected)
  ex: expect(actual).to be expected

  equal 
  also passes when actual.equal?(expected)
  ex: expect(actual).to equal expected

 -here they are in context: 

  describe "An example of the equality Matchers" do 
    it "should show how the equality Matchers work" do 
      a = "test string" 
      b = a 
        
      # The following Expectations will all pass 
      expect(a).to eq "test string" 
      expect(a).to eql "test string" 
      expect(a).to be b 
      expect(a).to equal b 
    end
  end

 -this will pass

**comparison matchers**
 -you can also use the regular comparisons: 

  >	
  Passes when actual > expected	
  expect(actual).to be > expected

  >=, <, <=	
  -these work just like above 
 
  be_between(x,y).inclusive 
  Passes when actual is <= min and >= max
  expect(actual).to be_between(min, max).inclusive

  be_between exclusive
  Passes when actual is < min and > max
  expect(actual).to be_between(min, max).exclusive

  match
  Passes when actual matches a regular expression
  expect(actual).to match(/regex/)

-again here they are incontext, notice you need to use the 
  "be" matcher:

describe "An example of the comparison Matchers" do
   it "should show how the comparison Matchers work" do
      a = 1
      b = 2
      c = 3		
      d = 'test string'
      # The following Expectations will all pass
      expect(b).to be > a
      expect(a).to be >= a 
      expect(a).to be < b 
      expect(b).to be <= b 
      expect(c).to be_between(1,3).inclusive 
      expect(b).to be_between(1,3).exclusive 
      expect(d).to match /TEST/i 
   end
end

**class/Type matechers**
 -here is how you test for type and class: 

    be_instance_of	
    Passes when actual is an instance of the expected class.	
    expect(actual).to be_instance_of(Expected)

    be_kind_of	
    Passes when actual is an instance of the expected class or 
      any of its parent classes.	
    expect(actual).to be_kind_of(Expected)

    respond_to	
    Passes when actual responds to the specified method.	
    expect(actual).to respond_to(expected)

 -context: 

describe "An example of the type/class Matchers" do
 
   it "should show how the type/class Matchers work" do
      x = 1 
      y = 3.14 
      z = 'test string' 
      
      # The following Expectations will all pass
      expect(x).to be_instance_of Fixnum 
      expect(y).to be_kind_of Numeric 
      expect(z).to respond_to(:length) 
   end
   
end

**true false and nill matchers**

    be true	
    Passes when actual == true	
    expect(actual).to be true

    be false	
    Passes when actual == false	
    expect(actual).to be false

    be_truthy	
    Passes when actual is not false or nil	
    expect(actual).to be_truthy

    be_falsey	
    Passes when actual is false or nil	
    expect(actual).to be_falsey

    be_nil	
    Passes when actual is nil	
    expect(actual).to be_nil

 context: 

  describe "An example of the true/false/nil Matchers" do
   it "should show how the true/false/nil Matchers work" do
      x = true 
      y = false 
      z = nil 
      a = "test string" 
      
      # The following Expectations will all pass
      expect(x).to be true 
      expect(y).to be false 
      expect(a).to be_truthy 
      expect(z).to be_falsey 
      expect(z).to be_nil 
     end 
  end

**error matchers**

  raise_error(ErrorClass)	
  Passes when the block raises an error of type ErrorClass.	
  expect {block}.to raise_error(ErrorClass)

  raise_error("error message")	
  Passes when the block raise an error with the message 
    “error message”.	
  expect {block}.to raise_error(“error message”)

  raise_error(ErrorClass, "error message")	
  Passes when the block raises an error of type ErrorClass 
    with the message “error message”	
  expect {block}.to raise_error(ErrorClass,“error message”)

 
==============================================================
6SSSS    Test doubles (mocks)
==============================================================
**a test double is essentially a dummy class** 
 -lets say we have a ClassRoom class, that accecpts student
  objects, and one of the ClassRoom class functions takes each
  student objects :name and joins it into a string: 

  class ClassRoom 
   def initialize(students) 
      @students = students 
   end
   
   def list_student_names 
      @students.map(&:name).join(',') 
   end 
end

 -so if you only have that class, and not the Student class,
  how would you test it? 
 -by using the rspec #double method

describe ClassRoom do 
   it 'the list_student_names method should work correctly' do 
      student1 = double('student') 
      student2 = double('student') 
      
      allow(student1).to receive(:name) { 'John S'} 
      allow(student2).to receive(:name) { 'Jill S'} 
      
      cr = ClassRoom.new [student1,student2]
      expect(cr.list_student_names).to eq('John S,Jill S') 
   end 
end

 -what #double does in that code is assign each student as an
  instance of the Student class (note you spell it lowecase)
  which essentially does this: 

    class Student
    end 

    student1 = Student.new

 -and then use this syntax to add methods and properties to
  your "class" 
  
    allow(student1).to receive(:name) { 'John S'}
    allow(var).to receive(:property) {definition}

 -once our students each have a name property, we create a 
  real instance of classroom, passing in the student objects
  in an array: 

    cr = ClassRoom.new [student1,student2]

 -finally, test it using the usual expect and eq: 

    expect(cr.list_student_names).to eq('John S,Jill S') 

 -use test doubles to tell there is a problem with a specific
  class that you are testing (ClassRoom) and not another

    
==============================================================
7SSSS    Stubbing
==============================================================
**stubbing basics**
 -stubbing (or method stub) as it is called, is a special type
  of method that stands in for an existing method, or method
  that doesn't exist yet
 -for example, when you fake what user input SHOULD be and 
  then act on that in the test 

**file formatting** 
 -if you run a test on a file that directly runs the #gets
  method, your test suite won't run and will hit a load 
  error
 -your file must have gets WITHIN a method, and then test 
  that using the method below
 -if you test a file that actually RUNS gets if you were
  to type "ruby filename" into the command line, it can't
  be tested with RSpec, this is why runner files exist  
 
**stubbing with puts/print**
 -how do you test puts and print< they have no return value
 -you test it by checking Ruby's special global $stdout
 
 #old way
 # RSpec code 
  it "should test puts " do 
    expect($stdout).to receive(:puts).with("on terminal")
    puts "on terminal" # or your method that uses puts
  end

 -first we tell rspec to expect that puts will be used to
  pass "on the termnial" to $stdout 
 -then we use puts (or rhe method that outputs) afterwards
  to actually output text
 -there are many ways to accomplish this, but this pattern
  is fastest


  # new way as of 2014 and rspec 3.0
  it "should test puts " do 
    expect{ puts_method}.to output("hello there\n").to_stdout
    expect{ print_method}.to output("hello there").to_stdout
  end

 -the muvh cleaner output().to_stdout method just takes 
  the expects method and the method to test, then the text
  that you want inside output
 -also note that with prints and puts you need to account
  for the newline character


**testing gets**
 -you essentially tell self to expect the gets method, 
  and return "text" when its called
 -you then run the method that calls gets
 -once ruby comes to the gets call, it will put in the 
  value specified before
 
  it "should call gets once" do
    expect(self).to receive(:gets).and_return("s")
    thing = gets.strip
    expect(thing).to eq("s")
  end

  it "should call gets twice" do
    expect(self).to receive(:gets).and_return("one")
    expect(self).to receive(:gets).and_return("two")
    thing = gets.strip
    thing2 = gets.strip
    expect([thing, thing2]).to eq(["one","two"])
  end

 -notice that the gets values are filled in from their
  original order
 -the first gets value gets put in the first gets call
 -not like it calls the most recent value first
 -first returned, first called

**gets and puts together**
 -play song gets a user's song choice, and then puts it to 
  the screen
 -here is how you would test something like that

  it "can use a full song name to find a song" do
    allow(self).to receive(:gets).and_return("Phoenix - 1901")
    expect{ play(songs) }.to output(/Phoenix - 1901/).to_stdout
  end

**classes stubbing with gets**
 -that above example uses loose functions, which is why
  self recieves gets 
 -HOWEVER if you have a class that needs to accept gets,  
  then use the class name, not this
 -here we have an instance of Encoder called machine, and 
  it requires a single get value:  

  context "run test" do
    it "should take a gets" do
      machine = Encoder.new
      expect(machine).to receive(:gets).and_return("abc")
      expect{machine.encode}.to output(/[a-z]{3}\s+cipher: \d*/).to_stdout
    end
  end

 -in fact, #encode itself calls another method #get_user_msg
  which takes the #gets, so you can see that the the #recieve
  method really does just store a gets value until it is 
  needed
 -we are telling "self" to recieve
  a fake "gets" call, and then artificially return an input
  of "Phoenix..." 
 -now, when we call the play method, when it gets to the 
  gets.chomp line, it will look back and see "Phoe.." is the
  output, which allows the test to continue 


**old way**
 -instead of using allow(), you may see: 
  

describe ClassRoom do 
   it 'the list_student_names method should work correctly' do 
      student1 = double('student') 
      student2 = double('student')
      
      student1.stub(:name).and_return('John Smith')
      student2.stub(:name).and_return('Jill Smith') 
      
      cr = ClassRoom.new [student1,student2] 
      expect(cr.list_student_names).to eq('John Smith,Jill Smith') 
   end 
end

 -this has been depreciated and the #stub() method is no longer
  used 

**allow vs expect**
 -when you use allow, it's ussually in a double situation, 
  as in, this would be a new object, and it will be allowed to
  have this new method once you really make it 
 -with expect, the method is already made, and you expect it 
  to act a certain way when it gets called (ie, you expect 
  self to already know what the gets method is and act 
  accordingly

  book = double("book")
  allow(book).to receive(:title) { "The RSpec Book" }
  expect(book).to receive(:title) { "The RSpec Book" }
 
 -see how first we allow the method to be created, then we 
  expect it to behave a certain way 
 -and in my above example using machine, it expects machine
  to accept a gets because i already wrote it to behave that
  way






==============================================================
8SSSS    Hooks 
==============================================================
**setup and teardown** 
 -it may be helpful for certain code to execute before all
  tests, before each individual test, after each individual 
  test, and after all tests
 -hooks allow you to do this 
 -this also makes it so that you can set up each test 
  independent of one another with the same setup code 
  -no test should rely on a previous one passing, that is bad
    test design

**before, after, :each, :all**
 -this example code outlines each block quite nicely: 

  describe "Before and after hooks" do 
    before(:each) do 
      puts "Runs before each Example" 
    end 
   
    after(:each) do 
      puts "Runs after each Example" 
    end 
   
    before(:all) do 
      puts "Runs before all Examples" 
    end 
   
    after(:all) do 
      puts "Runs after all Examples"
    end 
   
    it 'is the first Example in this spec file' do 
      puts 'Running the first Example' 
    end 
   
    it 'is the second Example in this spec file' do 
      puts 'Running the second Example' 
    end 
  end

 -here is what that will print to the terminal: 

    Runs before all Examples 
    Runs before each Example 
    Running the first Example 
    Runs after each Example 
    .Runs before each Example 
    Running the second Example 
    Runs after each Example 
    .Runs after all Examples 

 -so in each block, simple put your code 
 -here are the starting commands: 
  befor(:each OR :all)
  after(:each OR :all)

**using before to initialize a class** 
 -take this simple class: 

      class Thing
        def widgets
          @widgets ||= []
        end
      end

 -to use before(:each) to assign a variable as a new instance
  of an object, you oddly enough can't do: 

  before(:each) do 
    thing = Thing.new
  end

 -because each before block won't be able to share thing, 
  you'll have to make an instance variable @thing, so that
  all the other tests can see it 
 
    before(:each) do
      @thing = Thing.new
    end

 -this makes @thing an instance varaible of the main class
  so that all tests can see it
 -here is some example tests to deal with this

#rspec code
describe Thing do
  before(:each) do
    @thing = Thing.new
  end

  describe "initialized in before(:each)" do
    it "has 0 widgets" do
      @thing.should have(0).widgets
    end

    it "can get accept new widgets" do
      @thing.widgets << Object.new
    end

    it "does not share state across examples" do
      @thing.should have(0).widgets
    end
  end
end


==============================================================
9SSSS    Tags 
==============================================================
**sort your tests with tags** 
 -tags are a great way to get specific with your testing 
  runs: 

  describe "How to run specific Examples with Tags" do 
   it 'is a slow test', :slow = > true do 
      sleep 10 
      puts 'This test is slow!' 
   end 
   
   it 'is a fast test', :fast = > true do 
      puts 'This test is fast!' 
   end 
  end

 -as you saw with the options and formatting section, you can
  now call only certain tests to run with: 

    $ rspec --tag slow tag_spec.rb
    #we're only running a specific file here  

 -which outputs: 

  Run options: include {: slow = >true}

  This test is slow! 
  . 
  Finished in 10 seconds (files took 0.11601 seconds to load) 
  1 example, 0 failures

 -this lets you know that only specific tests were run
 -here is the tag format: 

  it "text here", :tag => true do

 -the rest is the same, just not the comma and it must be a 
  symbol


==============================================================
10SSSS    Subjects 
==============================================================
**declutter code by moving it into the describe line**
 -you can move object instantiation into the describe line 
  and then use the #is_expected method to check it: 

  #standard way 
  class Person 
   attr_reader :first_name, :last_name 
   
   def initialize(first_name, last_name) 
      @first_name = first_name 
      @last_name = last_name 
   end 
  end 

  describe Person do 
     it 'create a new person with a first and last name' do
        person = Person.new('John', 'Smith')
        
        expect(person).to have_attributes(first_name: 'John') 
        expect(person).to have_attributes(last_name: 'Smith') 
     end 
  end

 #using subject feature 
  class Person 
   attr_reader :first_name, :last_name 
   
   def initialize(first_name, last_name) 
      @first_name = first_name 
      @last_name = last_name 
   end 
    
  end 

  describe Person.new 'John', 'Smith' do 
     it { is_expected.to have_attributes(first_name: 'John') } 
     it { is_expected.to have_attributes(last_name: 'Smith') }
  end

 -this can make it clearer and quicker to get simple tests 
  like this done







==============================================================
11SSSS    helpers
==============================================================
**reusing code**
 -rspec uses "helpers" (which are just methods) to recycle 
  reusable code 
 -see the example code below: 

    class Dog 
       attr_reader :good_dog, :has_been_walked 
       
       def initialize(good_or_not) 
          @good_dog = good_or_not 
          @has_been_walked = false 
       end 
       
       def walk_dog 
          @has_been_walked = true 
       end 
    end 

    ## RSPEC FILE 
    describe Dog do 
       it 'should be able to create and walk a good dog' do 
          dog = Dog.new(true) 
          dog.walk_dog 
          
          expect(dog.good_dog).to be true
          expect(dog.has_been_walked).to be true 
       end 
       
       it 'should be able to create and walk a bad dog' do 
          dog = Dog.new(false) 
          dog.walk_dog 

          expect(dog.good_dog).to be false
          expect(dog.has_been_walked).to be true 
     
       end 
    end
 
 -good, but a bit repetative, here it is using helpers

    class Dog
       attr_reader :good_dog, :has_been_walked 
       
       def initialize(good_or_not)
          @good_dog = good_or_not 
          @has_been_walked = false 
       end 
       
       def walk_dog 
          @has_been_walked = true 
       end 
    end 

    ## RSPEC FILE 
    describe Dog do 
      # this is the helper method 
       def create_and_walk_dog(good_or_bad)
          dog = Dog.new(good_or_bad)
          dog.walk_dog
          return dog 
       end 
       
       it 'should be able to create and walk a good dog' do
          dog = create_and_walk_dog(true)
          
          expect(dog.good_dog).to be true
          expect(dog.has_been_walked).to be true 
       end 
       
       it 'should be able to create and walk a bad dog' do 
          dog = create_and_walk_dog(false)
          
          expect(dog.good_dog).to be false
          expect(dog.has_been_walked).to be true 
       end 
    end

 -"helpers" are just regular ruby methods that you can call to
  make your code succinct 







==============================================================
12SSSS    metadata
==============================================================
**Meta data** 
 -RSpec gives you access to the meta data: 

RSpec.describe "An Example Group with a metadata variable", :foo => 17 do 
   context 'and a context with another variable', :bar => 12 do 
      
      it 'can access the metadata variable of the outer Example Group' do |example| 
         expect(example.metadata[:foo]).to eq(17) 
      end
      
      it 'can access the metadata variable in the context block' do |example|  
         expect(example.metadata[:bar]).to eq(12) 
      end 
      
   end 
end

#end code 

 -notice you need to explicitly state RSpec.describe 
  and then in the "it" block, pass a single value through
 -When you run the above code, you will see this output −

.. 
Finished in 0.002 seconds (files took 0.11301 seconds to load) 
2 examples, 0 failures


 -Metadata provides a way to assign variables at various 
  scopes within your RSpec files. The example.metadata 
  variable is a Ruby hash which contains other information 
  about your Examples and Example groups.

 -For instance, let’s rewrite the above code to look 
  like this:

RSpec.describe "An Example Group with a metadata variable", :foo => 17 do
   context 'and a context with another variable', :bar => 12 do 
      
      it 'can access the metadata variable in the context block' do |example|
         expect(example.metadata[:foo]).to eq(17) 
         expect(example.metadata[:bar]).to eq(12) 
         example.metadata.each do |k,v|
         puts "#{k}: #{v}"
      end
		
   end 
end 

 -When we run this code, we see all of the values in the  
  example.metadata hash 


.execution_result: #<RSpec::Core::Example::ExecutionResult:0x00000002befd50>
block: #<Proc:0x00000002bf81a8@C:/rspec_tutorial/spec/metadata_spec.rb:7>
description_args: ["can access the metadata variable in the context block"]
description: can access the metadata variable in the context block
full_description: An Example Group with a metadata variable and a context 
   with another variable can access the metadata variable in the context block
described_class:
file_path: ./metadata_spec.rb
line_number: 7
location: ./metadata_spec.rb:7
absolute_file_path: C:/rspec_tutorial/spec/metadata_spec.rb
rerun_file_path: ./metadata_spec.rb
scoped_id: 1:1:2
foo: 17
bar: 12
example_group:
{:execution_result=>#<RSpec::Core::Example::ExecutionResult:
   0x00000002bfa0e8>, :block=>#<
   Proc:0x00000002bfac00@C:/rspec_tutorial/spec/metadata_spec.rb:2>, 
   :description_args=>["and a context with another variable"], 
	
   :description=>"and a context with another variable", 
   :full_description=>"An Example Group with a metadata variable
   and a context with another variable", :described_class=>nil, 
      :file_path=>"./metadata_spec.rb", 
		
   :line_number=>2, :location=>"./metadata_spec.rb:2", 
      :absolute_file_path=>"C:/rspec_tutorial/spec/metadata_spec.rb",
      :rerun_file_path=>"./metadata_spec.rb", 
		
   :scoped_id=>"1:1", :foo=>17, :parent_example_group=>
      {:execution_result=>#<
      RSpec::Core::Example::ExecutionResult:0x00000002c1f690>, 
      :block=>#<Proc:0x00000002baff70@C:/rspec_tutorial/spec/metadata_spec.rb:1>
      , :description_args=>["An Example Group with a metadata variable"], 
		
   :description=>"An Example Group with a metadata variable", 
   :full_description=>"An Example Group with a metadata variable", 
	:described_class=>nil, :file_path=>"./metadata_spec.rb", 
   :line_number=>1, :location=>"./metadata_spec.rb:1",
   :absolute_file_path=>
	
   "C:/rspec_tutorial/spec/metadata_spec.rb", 
   :rerun_file_path=>"./metadata_spec.rb", 
   :scoped_id=>"1", :foo=>17}, 
   :bar=>12}shared_group_inclusion_backtrace: [] 
	
last_run_status: unknown .
.
Finished in 0.004 seconds (files took 0.11101 seconds to load) 
2 examples, 0 failures


 -Most likely, you will not need to use all of this 
  metadata, but look at the full description value −

 -An Example Group with a metadata variable and a context 
  with another variable can access the metadata variable in 
  the context block.

 -This is a sentence created from the describe block 
  description + its contained context block 
  description + the description for the it block.

 -What is interesting to note here is that, these three 
  strings together read like a normal English 
  sentence, which is one of the ideas behind RSpec, 
  having tests that sound like English descriptions of 
  behavior.


==============================================================
13SSSS    Filtering
==============================================================
**positive and negative** 
 -it seems that functional tests are refered to as positive 
  tests, while error tests are refered to as negative 
 -this classification is based on RSpec metadata, so you need
  to use RSpec.describe: 

  RSpec.describe "An Example Group with positive and negative Examples" do 
   context 'when testing Ruby\'s build-in math library' do
      
      it 'can do normal numeric operations', positive: true do 
         expect(1 + 1).to eq(2) 
      end 
      
      it 'generates an error when expected', negative: true do 
         expect{1/0}.to raise_error(ZeroDivisionError) 
      end
      
   end 
end

 -you can then run each type specificaly with the tag flag
 -truthfully, these seem to be just tags 

  rspec --tag positive filter_spec.rb


==============================================================
14SSSS    Expectations 
==============================================================
**basics of expect** 
 -two main things to keep in mind about expectations: 

  1. an expectation is simply an "it" block that uses 
  the expect method. That's it.
    -the expect sytnax is becuase RSpec is BDD Behavior Driven
     development, it's the idea that you are testing expected
     behaviors 
  2. expectation syntax is relatively new, introed in 2012,
  it used to be should() 
    (1 + 1).should eq(2)   # old 
    expect(1 + 1).to eq(2) # new 

 -this is just to warn you that older code will use this 
  syntax: 

  RSpec.describe "An RSpec file that uses the old syntax" do
   it 'you should see a warning when you run this Example' do 
      (1 + 1).should eq(2) 
   end 
end

 -and will output this: 

. Deprecation Warnings:

Using `should` from rspec-expectations' old `:should` 
   syntax without explicitly enabling the syntax is deprecated. 
   Use the new `:expect` syntax or explicitly enable 
	
`:should` with `config.expect_with( :rspec) { |c| c.syntax = :should }`
   instead. Called from C:/rspec_tutorial/spec/old_expectation.rb:3 :in 
   `block (2 levels) in <top (required)>'.

If you need more of the backtrace for any of these deprecations to
   identify where to make the necessary changes, you can configure 
`config.raise_errors_for_deprecations!`, and it will turn the deprecation 
   warnings into errors, giving you the full backtrace.

1 deprecation warning total 
Finished in 0.001 seconds (files took 0.11201 seconds to load) 
1 example, 0 failures

 -unless you have to use the old way, don't.

==============================================================
15SSSS    Testing random stuff 
==============================================================
**either use Regex** 
 -if you know that only a certain part of your code will be 
  random, say a random number in a string, you can use regex
  with the #match method: 

  # this is from a cryptography program, which scrambles a
  # message. Meaning, I know that the message will be a 
  # certain length of alpha characters, but not what. I also
  # know there will be a digit of a cipher, but not which
  # regex handles this easily and checks the output:  
  context "run test" do
    it "should take a gets" do
      machine = Encoder.new
      expect(machine).to receive(:gets).and_return("abc")
      expect{machine.encode_user_msg}.to output(/[a-z]{3}\s+cipher: \d*/).to_stdout
    end
  end

**or you stub for random things**
 -testing random output is tricky, if a method produces a
  random output, you have to stub it
 -in this example, the Airport class generates a random number
  and if that number is in a certain range, it decides the 
  weather (eg 1-20 = stormy, 21-40 = cloudy)
 -that function is weather_rand, so we do 
    airport.allow(:weather_rand).and_return(5)
 -then, with the random weather set, you can test whether 
  or not it raises an error (bad weather raises an error in
  the ruby code) 
  
   it 'shouldn't take off when there's a storm brewing' do
      airport = Airport.new [plane]
      airport.expect(:weather_rand).and_return(5)
      # a 5 is a storm 
      expect(lambda { airport.plane_take_off(plane) }).to raise_error(RuntimeError) 
  end 
 
 -it tells the airport object to expect that it will recieve
  the weather_rand method, and when it does, to return a val
  of 5, this allows for the various outcomes to be tested when
  airport.plane_take_off is run 
 
 -here is the actual code: 

  def weather_rand
    rand(100)
  end

  def plane_land plane
    raise "Too Stormy!" if weather_ran <= 20
    permission_to_land plane
  end

  def permission_to_land plane
    raise "Airport is full" if full?
    @planes << plane
    plane.land!
  end

  def plane_take_off plane
    raise "Too Stormy!" if weather_ran <= 20
    permission_to_take_off plane
  end

  def permission_to_take_off plane
    plane_taking_off = @planes.delete_if {|taking_off| taking_off == plane }
    plane.take_off!
  end

 -and here is the stackoverflow link: 

https://stackoverflow.com/questions/19451498/how-do-i-take-into-account-the-random-number-in-my-rspec-tests
