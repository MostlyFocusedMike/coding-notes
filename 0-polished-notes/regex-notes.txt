regular expressions 

TABLE OF CONTENTS 
1SSSS   intro
2SSSS   Basic email validation
3SSSS   pulling out specific words 
4SSSS   opposites and interval expressions
5SSSS   multi-line strings
6SSSS   capture groups 


INTERLUDES 
mSSSS   main sets and characters in regex

==============================================================
1SSSS    intro
==============================================================
**regex is for string validation** 
 -use it to match characters in strings 
 -it's used across many different languages 
 -the notes here are GENERAL regular explressions, 
  see the languages main notes for the subtle differences that
  may occur


**basic syntax**
 -a regular expression is between to backslashes 

  str.match(/this/)

 -there are two main parts of a regular expression
  the subject string (or subject) 
    this is str in the above example, and it's the string
    that we are searching through
  to regular expression (or regex)
    a group of characters that represent rules for searching
    and matching against

 -the regex engine will then go through the string and try to
  find a match for the WHOLE regex
 -a partial match does not count, however if there is more
  text than the regex, that is fine, regex will just take 
  the chars that do match and ignore the rest 
 -finding a match in some, but not all of the string is called
  a partial match, which is sometimes desirable

  "40".match(/404/) # this does not come up with a match
  "404".match(/404/) # this does 
  "4040".match(/404/) # this does and is a partial match

 -it will search the whole string to find a match (unless
  you specify otherwise 

**you can use regular string patterns** 
 -as you can see /404/ is perfectly valid, regex can use 
  chunks that are regular characters as they are like /this/
  or /that/
 -these patterns are called "regular expression literals"
 -the power comes from combining these patterns with special
  characters like . or | that also have special meanings
  (you can escape them to get their regular meanings too) 

==============================================================
mSSSS    main sets and characters in regex
==============================================================
 -here is a list of all the main possibilities
 - do not worry if they don't make sense yet, some of the 
  more complex ideas will be used later, this is just a handy
  reference

  | = the or operator, match the pattern on the left OR 
      the pattern on the right
  + = the plus operator, when there is one or MORE of a 
      preceding pattern 
  . = wildcard, matches any character except the newline char
  ? = either 0 or one of a preceding pattern,
  * = either 0 or any of a preceding pattern 
  \ = escape, use this to make special characters represent
      their literal forms, or literal characters represnt 
      their special forms 
      (. = anything, \. = .)
      (s = s, \s = any whitespace character)      

  ^ = anchor or "not", if at the start of the regex it means 
      that no other characters in the string should exist to 
      be a match, if in a character set, it means "not"
  $ = end anchor, means that no characters can come after the 
      string to be a match
  \b = any word boundary, stops a match once a non word char
       is found 

  a{3} = interval expression, Exactly 3 of a
  a{3,} =	3 or more of a
  a{3,6} = Between 3 and 6 of a

  () = group, capture everything enclosed and return it
  ?: = non-capture group, no return value is given

  [] = Character sets 
      -these represent a single character 
      -they can use literals or ranges (ranges only work  
       within charcater sets)
  [abcd] = any single character a b c or d 
  [a-z] = any lowercase letter
  [A-Z] = any upercase letter
  [0-9] = any digit
  [a-zA-Z] = any upercase or lowercase letter
  [a-zA-Z0-9] = any upercase or lowercase letter or digit

  \s = any space character 
  \S = any non space character
  \d = any digit
  \D = any non digit
  \w = any word character
  \w = any non word character


 -so here are some examples in use
  
  "404" = /404|227/
  "227" = /404|227/ 
  "!" = /./
  "+" = /\+/
  "aaa" = /a+/
  "bababa" = /boo|(ba)+/
  "505" = /505-?/
  "505-" = /505-?/
  any length of leters only = [a-zA-Z]+ 

 -remember that a character set is any SINGLE character,
  use the + to extend it 

**you can mix in ranges and special characters**
 -both of these are perfectly valid character sets
  [a-zA-Z0-9\s] = any non punctuation character 
  [\w\s] = same as the above 

**modifiers**
 -modifiers can alter your regex, and they come right after
  the last backslash: 

  /[a-z]+/i

 -that i for example make the character set ignore cases 
 -be careful though, modifiers are language specific so they
  may change
 -the i for case insensitivity is pretty common

===============================================================
2SSSS    Basic email validation
===============================================================
**validate an email with a single pattern**
 -instead of using multiple check and steps, a single line
  will hit pretty much all email addresses: 

    /^\w+@\w\.(com|net|org|edu)$/i 
 
 -the only tricky parts are the anchors and the multiple 
  "or" values

**anchors** 
 -regex will ignore extra letters if theres at least a match
  somewhere in the set 
 -this is a huge security issue as: 

  mike@gmail.com =  /\w+@\w\.(com|net|org|edu)/i 

  is a match, and will for instance load it into your database
 -but so is this: 

    mike@gmail.com<HACK CODE> =  /\w+@\w\.(com|net|org|edu)/i 
 
  is also a match
 -this is where anchors come in, which tell the regex that 
  there should be nothing before or after the end of our 
  expression for a match to be found 
 - the ^ carrot is the start and the $ is the end 
  -note: in a character set the ^ also means "not":

    [^a-z] = any character that's not a lowercase letter

 -anchors come as the first and last thing in your regular
  expression 

**multiple "or" values**
 -to use multiple |, you need to enclose them in () so that
  regex knows to choose between those options because: 
  
    /^\w+@\w\.com|net|org|edu$/i 
  
 means: 
    mike@gmail.com
    net
    org
    edu

 -without () the first | test is choosing between 
  mike@gmail.com or net alone, or org alone, or edu alone
 -if you enclose them in () then regex knows that it must
  find a match in the subject out of the specified "or" options

==============================================================
3SSSS    pulling out specific words 
==============================================================
**looking for multiple whole matches** 
 -sometimes a user will submit text, and you want to check if 
  certain keywords appear, but no partial matches of those 
  keywords
 -let's say we're looking for confirmations to our invitation:

  looking for: 
  ok, Okay, okay, sure, yes, y

 -why are partial matches bad in this case? look here: 

  I assure you, I won't attend

 -that sure in assure would be a partial match and send the 
  wrong answer 
  (this is a contrived example, but you get the idea, since
  someone could say "I can't go, is that ok?" which is a
  problem for the code to handle)

**a regex to hit all that** 
 -here is an example regex that would get nothing but full
  matches for those keywords, and reject any partials: 

  /\b(ok(ay)?|sure|y(es))?\b/i

 -so we have a new anchor, \b, and the ? operator

**\b anchor**
 -allows searches to be done on whole words only, as in your
  search patter should start after a non word character and 
  end before a non word character (spaces and punctuation)
 -basically, it stops patterns at spaces: 

  "ok" = /\bok\b
  "ok ok" = /\bok\b # will find two matches
  "okay" != /\bok\b/ # it doesn't end before a non word char
  "okay" = /\bok/ # this works though

**? operator**
 -the ? means the preceding pattern is optional, it occurs 
  either 0 or 1 time 
 -it works on single characters, groups, and sets:

    a1a = /a[0-9]?a/
    aa = /a[0-9]?a/
    a a = /a\s?a/
    aa = /a\s?a/
    yes = /y(es)?/
    y = /y(es)?/

 -so y works, but so does yes, becuase we grouped the literal
  pattern together
  
**another case of multiple or values**
 -we need to lump all those options together becasue of the
  \b characters especially

    /\b(ok(ay)?|sure|y(es))?\b/i
 
  becuase this: 

    /\bok(ay)?|sure|y(es)?\b/i
 
 is: 
    \bok(ay)? vs sure vs y(es)?\b

 -so partial matches can occur on all three, when we really 
  want this: 

    
    \bok(ay)\b? vs \bsure\b vs \by(es)?\b
 
 -to keep this from happening, we group them together, so one
  value is selected, and then surrounded by \b


==============================================================
4SSSS    opposites and interval expressions
==============================================================
**^ vs \capitals**
 -the ^ can be used to specify that a character in a set is 
  NOT something:
    
    [^\d] = anything that is not a digit

 -however this looks weird when using anchors: 

    /^[^\d]+$/

 -the other way to get not is to simpy capitalize the special
  character: 

    \s = any space character 
    \S = any non space character
    \d = any digit
    \D = any non digit
    \w = any word character
    \w = any non word character

 -this is a much cleaner way of doing it 


**interval expressions**
 -interval expressions allow you to set control of how many
  times a pattern is used 

    a{3}	Exactly 3 of a
    a{3,}	3 or more of a
    a{3,6}	Between 3 and 6 of a
 
 -interval expressions can go before groups, sets, and 
  characters


==============================================================
5SSSS    multi-line strings
==============================================================
**the newline character**
 -a multiline string is just a string with \n newline chars 
  in them 
  -NOTE: some systems use other chars to represent newlines,
  so be aware

**matching all birds in a list** 
 -here is an example
    King penguin\n
    Emperor penguin\n
    Wandering Tern\n
    Dolphin\n
    Rockhop penguin\n
    Seal\n

 -so we want to get all those birds, but ignore dolphin and
  seal, here is a regex to do it:

    /^\w+\s(penguin|albatross|tern)$/mig 

**multiline and global modifiers**
 -when working with multiline strings, the anchors will mess
  up and go from the start of the string to the end, which
  is a problem since there will only be one match per LINE 
 -to make it so ^ and $ go line by line, as in treat each line
  like it's own subject string, use the m "multiline" modifier
 -however, this would only match the first instance, 
  so to get all the matches, use the g "global" modifier 

**ruby note**
 -this is not how ruby behaves, just a heads up,
 -^ and $ go line by line as the default, so no m modifier 
  is needed
   -in fact, the m modifier makes the . special char match all
    newlines
 -it is also global by default, so no g modifier even exists

==============================================================
6SSSS    capture groups 
==============================================================
**return groups** 
 -regex can be used to return data back to you
 -say you have a full address: 

  12 obed road, old saybrook, CT

-you could use capture groups to return the street, city,
 and state 

**what is a capture group**
 -anything enclosed in () is returned as a capture group,
  unless it starts with ?:, which makes it a non-capture
  group (as in used only to set a pattern) 
 -HOW this is handled varies by language, but the rough idea
  is: 

  /^(\d+\s[\w\s]+(?:lane|road)),\s([\w\s]+),\s(\w{2})$/i
   | 12   obed      road      |  old saybrook|  CT  |

 -so the "match groups" (the actual string values) are 
  1. 12 obed road 
  2. old saybrook
  3. CT 

 -notice that for some reason we only wanted lane or road, 
  so we had a non-capture group to do that or check 
 -these match groups can be set to variables or values in 
  arrays or hashes 
 -it's a useful feature for collecting and storing data
