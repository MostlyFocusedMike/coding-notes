////////////////////////////////////////////////
        0.WHAT IS SASS?

    Sass is a css preprocessor. That means you
write out Sass enhanced css in a .scss file and 
then compile it into a .css file.
    This allows you to take advantage of sass
things like variables, ixins, and functions, 
nut still output a regular .css file any browser
could read. 





////////////////////////////////////////////////
        1. INSTALL ON LINUX AND MAC

    In both cases, you need to install Ruby 
first, since Sass is a Ruby gem.

LINUX
    In the command line:
  sudo gem install sass --no-user-install

MAC
    It's just:
  gem install sass 
    If that gives you trouble use sudo

To double check Sass is installed, do:
  sass -v
to check the version and see that it's there





////////////////////////////////////////////////
        2. USE SASS

    Super simple, to convert a Sass file (.scss)
into a .css file, go into command line in the 
folder with the .scss file and:
  sass input-file.scss output-file.css

WATCH COMMAND 
    Typing out the Sass command each time is 
tedious. the --watch command has Sass watch a
file or folder for changes to the scss files, and
then auto updates the css file of the same name.
    So, assuming you set up your project right,
with a /scss root folder for all .scss, and a 
/css folder for all css, you would use the 
watch command on a single file like this:

  sass --watch sccs/style.scss:css/style.css

To watch all scss files, use:
  
  sass --watch scss:css 

    Basically, the colon separates the watch
from the set. you can just use a single
  
NOTE:
    --watch is an active process, so when
you are in VIM you will need to have the
process going in a separate shell.


////////////////////////////////////////////////
                3. VARIABLES
    Sass allows you to use variables like real
code. In the .scss file:

_____________________________________.scss_____
$font-stack:  Helvetica, sans-serif;
$primary-color: #333;

body {
  font-family: $font-stack;
  color: $primary-color;
}
________________________________________________

which will compile to:

_____________________________________.css_______
body {
  font-family: Helvetica, sans-serif;
  color: #333;
}
_________________________________________________

the formula is $name: value;

Use this to save so much time and make DRY (Don't
Repeat Yourself) code.

VARIABLE TYPES
  numbers: 10 10.1, even 10px is treated as a
          number (em and rem too)
  strings: "anything in quotes"
  booleans: true or false
  null: which is considered empty
  lists: this is a list; so, is, this; (so is me)
         (same, here). Lists can be separated by
         commas or just spaces, and can be inside
         () or not.
  maps: (key: value, key2: value2), so basically
        a dictionary
  NOTE: lists and maps can be nested. Also if the
        css variable needs commas (like a font
        stack), use them in the list. If it 
        doesn't (like border values) don't use
        them.

NOTE: LISTS START AT 1 NOT 0!!




/////////////////////////////////////////////////
                  4. NESTING

    css is hard to read because it doesn't match
the DOM heirarchy visually. Sass puts nesting
into css:

------------------------------------- .scss ---  
nav {
  li {
    font-family: serif;
    text-size: 12px;
    a {
      display: block;
      padding: 0;
    }
  }
}
-----------------------------------------------
Easy to see the relationship, but compiles
perfectly to:
------------------------------------- .css ---  
nav li {
    font-family: serif;
    text-size: 12px;
}
nav li a {
 display: block;
 padding: 0;
}
}

/*Assume I remembered to put in a ul*/
-----------------------------------------------






///////////////////////////////////////////////
            5.MIXINS

    A mixin is a repeated code block that should
accept a variable. That way, you write the main 
block once, then use the argument to change it 
each time (like when applying lots of gradients)
    To use ,ixins, just start with @mixin

-------------------------------------- .scss - 
@mixin border-gradient($col, $col2) {
 background: -webkit-linear-gradient($cl, $cl2)
 background: -o-linear-gradient($cl, $cl2)
 background: -moz-linear-gradient($cl, $cl2)
 background: -linear-gradient($cl, $cl2)
}  
.box {
 @include border-gradient(red, pink);
}
---------------------------------------------
So you create a mixin, and then you insert it
with @include(arguments). and it compiles
to:
-------------------------------------- .css -
.box { 
 background: -webkit-linear-gradient(red, yello)
 background: -o-linear-gradient(red, yello)
 background: -moz-linear-gradient(red, yellow)
 background: -linear-gradient(red, yellow)
}
---------------------------------------------
MIXINS AND DEFAULT VALUES

    Mixin parameters can have default values
in case they have a default value. 
--------------------------------------.scss --
@mixin border-rad($radius: 10px) {
   border-radius: $radius;
}
.border {
  @include border-radius; //this will default
                          //to 10px
}
----------------------------------------------
now, you can always override default values by
entering a variable that's different.

MIXINS FACTS: 
1. Mixins can take multiple arguments.
2. Sass allows you to explicitly define each 
   argument in your @include statement.
3. When values are explicitly specified you 
   can send them out of order.
4. If a mixin definition has a combination of 
   arguments with and without a default value, 
   you should define 
   the ones with no default value first.
5. Mixins can be nested.

Here are some examples of those facts: 

-------------------------------------.scss ------
@mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}

span { //only passes non-default argument
    @include dashed-border(3px);
}

p { //passes both arguments
    @include dashed-border(3px, green);
}

div { // out of order but explicitly defined
   @include dashed-border(color: purple, 
    width: 5px); 
}
-------------------------------------------------







///////////////////////////////////////////////
        6. THE & CHARACTER 

    The & selector is a sass constructor. 
It's basically sass's version of 'this' and
its used with pseudo-classes.
-------------------------------------- .scss - 
.notecard {
  color: red;
  &:hover{ 
    color: blue;
  }
}
---------------------------------------------
Since the & is in the nested element, it refers 
to the parent, in this case the .notecard class.
It compiles in css to the following:
 ------------------------------------- .css -
.notecard {
  color: red;
}  
.notecard:hover{ 
  color: blue;
}
 ---------------------------------------------
much more efficient, just don't forget the :





///////////////////////////////////////////////
        7. LISTS AND MAPS AS VARIABLES

     Sass allows you to pass maps and lists as
variables:  
-------------------------------------- .scss - 
$college-ruled-style: ( 
    direction: to bottom,
    width-percent: 15%,
    stripe-color: blue,
    stripe-background: white
);  //this map holds all variables for stripes

 @mixin stripes($direction, $width-percent, 
  $stripe-color, $stripe-background: #FFF) {
  background: repeating-linear-gradient(
    $direction,
    $stripe-background,
    $stripe-background ($width-percent - 1),
    $stripe-color 1%,
    $stripe-background $width-percent
  );
}   //this mixin's parameter order match 
    //match $college-ruled-styled

.definition {
      width: 100%;
      height: 100%;
      @include stripes($college-ruled-style...);
 } //DO NOT FORGET the "..." no space
---------------------------------------------
It's very simple, just don't forget to add the 
"..." immediately the map variable 





///////////////////////////////////////////////
            8. STRING INTERPOLATION

    String concatenation isn't the only way to
add a variable to a string, you can also use 
interpolation: 
-------------------------------------- .scss - 
 @mixin photo-content($file) {
  content: url(#{$file}.jpg); 
  //that #{variable} is string interpolation
  object-fit: cover;
}

.photo { 
  @include photo-content('titanosaur');
  width: 60%;
  margin: 0px auto; 
  }
---------------------------------------------
So now the word "titanosaur" is passed as an 
argument/variable into a string that tells the
css what the jpg file name is.





///////////////////////////////////////////////
            9.SASSY FUNCTIONS
    Sass can use functions, and if you ever learn
Ruby, you can even write your own. Here are a few
built in functions you can use: 

-fade-out  
    fade-out makes a color more transparent by 
taking a number between 0 and 1 and decreasing 
opacity, or the alpha channel, by that amount.
--------------------------------------------------
  $color: rgba(39, 39, 39, 0.5);
   $amount: 0.1;
   $color2: fade-out($color, $amount);
   //rgba(39, 39, 39, 0.4) 
--------------------------------------------------

-fade in
    Does the opposite thing as fade-out
-------------------------------------------------
$color: rgba(55,7,56, 0.5);
$amount: 0.1;
$color2: fade-in($color, $amount); 
//rgba(55,7,56, 0.6)
-------------------------------------------------



        
/////////////////////////////////////////////////
            10. ARITHMATIC
Sass also allows us to perform mathematical 
functions to compute measurementsâ€” including 
colors.

Here is how Sass computes colors:
With RGB and HSL it just adds the various colors
together as you'd expect. With hex, it breaks 
the 6 digits down to the three colors, 2 digits 
each:

$color: #010203 + #040506;

        01 + 04 = 05
        02 + 05 = 07
        03 + 06 = 09

and gets compiled to> color: #050709;

-Sass takes 
addition +
subtraction -
multiplication *
division /
modulo %

-NOTE: 10px, em, rem all units are ignored. Sass
would take that 10px as just 10 for arithmatic

DIVISION IS WEIRD
In CSS the / character can be used as a separator.
In Sass, the character is also used in division.

Here are the specific instances / counts as 
division:

1. If the value, or any part of it, is stored in 
a variable or returned by a function.

2. If the value is surrounded by parentheses, 
unless those parentheses are outside a list 
and the value is inside.

3. If the value is used as part of another 
arithmetic expression.

Here are some actual examples of that:

    width: $variable/6; //division
    line-height: (600px)/9; //division
    margin-left: 20-10 px/ 2; //division
    font-size: 10px/8px; //not division





/////////////////////////////////////////////////
            11. LOOPS

    Sass lets you use loops with your css:

@each loops
    These are basically "for each" loops and they
apply the code block to each item in a list.
String interpolation is helpful with this.
-------------------------------------------.scss-
        $list: (orange, purple, teal);

        @each $item in $list {
          .#{$item} {
            background: $item;
          }
        }
-------------------------------------------------
which compiles to:
------------------------------------------.css --
.orange {
  background: orange;
}

.purple {
  background: purple;
}

.teal {
  background: teal;
}

-------------------------------------------------

@for loops
    You know what a for loop is, here's syntax:

@for $i from $begin through $end {
   //some rules and or conditions
}
In the example above:

$i is just a variable for the index, 
or position of the element in the list

$begin and $end are placeholders for the start 
and end points of the loop, they can be variables
or they can just be integers.
-keep in mind, it's inclusive, so 1 through 4 is 
  1 2 3 4 

The keywords through and to are interchangeable 
in Sass

here's an example:
-------------------------------------.scss ------
$total: 10; //Number of .ray divs in our html
$step: 360deg / $total; //Used to compute the hue based on color-wheel

@for $i from 1 through $total {
  .ray:nth-child(#{$i}) {
    background: adjust-hue(blue, $i * $step);
    width: if($i % 2 == 0, 300px, 350px);
        margin-left: if($i % 2 == 0, 0px, 50px);
   }
}
.ray {
  height: 30px;
  
}
-------------------------------------------------
Here's the compiled css

--------------------------------------,css ------
.ray:nth-child(1) {
  background: #9900ff;
  width: 350px;
  margin-left: 50px;
}

.ray:nth-child(2) {
  background: #ff00cc;
  width: 300px;
  margin-left: 0px;
}

.ray:nth-child(3) {
  background: #ff0033;
  width: 350px;
  margin-left: 50px;
}

.ray:nth-child(4) {
  background: #ff6600;
  width: 300px;
  margin-left: 0px;
}

.ray:nth-child(5) {
  background: yellow;
  width: 350px;
  margin-left: 50px;
}

.ray:nth-child(6) {
  background: #66ff00;
  width: 300px;
  margin-left: 0px;
}

.ray:nth-child(7) {
  background: #00ff33;
  width: 350px;
  margin-left: 50px;
}

.ray:nth-child(8) {
  background: #00ffcc;
  width: 300px;
  margin-left: 0px;
}

.ray:nth-child(9) {
  background: #0099ff;
  width: 350px;
  margin-left: 50px;
}

.ray:nth-child(10) {
  background: blue;
  width: 300px;
  margin-left: 0px;
}

.ray {
  height: 30px;
}

-------------------------------------------------
As you can see, this saves a ton of space.

/////////////////////////////////////////////////
            12. CONDITIONALS

    You can also use conditionals with Sass

Here's a single line version to define width:
width: if( $condition, $value-if-true, $value-if-false);

Here are options with more than one conditonal:

@mixin deck($suit) {
 @if($suit == hearts || $suit == spades){
   color: blue;
 }
 @else-if($suit == clovers || $suit == diamonds){
   color: red;
 }
 @else{
   //some rule
 }
}

Notice that the strings aren't using quotes,

and it uses the or || pipes, and is &&, notice
also that it uses an if, else-if, else chain, not
a case statment.
Mixins are good for condtionals 






///////////////////////////////////////////////////////
            13. SASS FILE STRUCTURE

    Here's a typical file system for sass

/sass
    /components
        _butons.scss
        _carousel.scss
    /helpers
        _variables.scss
        _functions.scss
        _mixins.scss
    /layout
        _grid.scss
        _header.scss
        _footer.scss
    /pages 
        _home.scss
        _about.scss
        ...
    main.scss

/css
    styles.css

    All those _files.scss are called PARTIALS.
Partials in Sass are the files you split up to 
organize specific functionality in the codebase.

    They use a _ prefix notation in the file name 
that tells Sass to hold off on compiling the file 
individually and instead import it.
    To import this partial into the main file - or the
file that encapsulates the important rules and the 
bulk of the project styles - omit the underscore.

    For example, to import a file named 

_variables.scss,

    add the following line of code:

@import "variables";

The global file imports all the components and 
centralizes the logic.

@import

    To gain access to these partials, use @import
-Typically, all imported SCSS files are imported 
into a main SCSS file which is then combined to 
make a single CSS output file.
-The main/global SCSS file has access to any 
 variables or mixins defined in its imported 
 files. 
-The `@import command takes a filename to import.

By default, @import looks for a Sass file in the
same or otherwise specified directory but there 
are a few circumstances where it will behave 
just like a  CSS @import rule:

        If the fileâ€™s extension is .css.

        If the filename begins with http://.

        If the filename is a url().

        If the @import has any media queries.

    In addition to keeping code organized, importing
files can also save you from repeating code. 
For example, if multiple SCSS files reference the same 
variables, importing a file with variables partial
would save the trouble of redefining them each time.






////////////////////////////////////////////////
                14. @EXTEND

    @extend is basically Sass's version of inheritance.
Here it is: 
.lemonade {
  border: 1px yellow;
  background-color: #fdd;
}
.strawberry {
  @extend .lemonade;
  border-color: pink;
}

That saves you from having to label an item with 
both .lemonade, and strawberry. You can just add 
strawberry, since it will have all of .lemonade's
rules now. 

This works great if you need the lemonade class
and a strawberry class, but what if you just 
wanted a basic "drink" class that you could add
to all other drinks, but never needed as a 
standalone class? Use a % placeholder.





///////////////////////////////////////////////
                15. %PLACEHOLDERS

    %placeholders are used for groups of rules
that are used in other classes, but never as a 
class itself. 

 %drink {
    font-size: 2em;
    background-color: $lemon-yellow;
 }

 .lemonade {
  @extend %drink;
  //more rules
 }
 
 .coffee {
 @extend %drink;
 //more rules
 }

    Placeholders prevent rules from being 
rendered to CSS on their own and only become 
active once they are extended anywhere an id or 
class could be extended.
 
PLACEHOLDERS VS. MIXINS 
@mixin blocks will always be rendered into it's
own rule, even if another element uses the same
@mixin. See how @extend pairs elements instead:

-----------------------------------------------
@mixin no-variable {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
}

%placeholder {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
}

span {
  @extend %placeholder;
}

div {
  @extend %placeholder;
}

p {
  @include no-variable;
}

h1 {
  @include no-variable;
}

-----------------------------------------------

-----------------------------------------------
span, div{
  font-size: 12px;
  color: #FFF;
  opacity: .9;
}

p {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
  //rules specific to ps
}

h1 {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
  //rules specific to ps
} 
-----------------------------------------------
see how span and div use extend so they are 
combined, while p and h1 are identical, but still
get listed out separately.

As a general rule of thumb, you should

    Try to only create mixins that take in an 
    argument, otherwise you should extend.
    (since placeholders don't take variables)

    Always look at your CSS output to make sure 
    your extend is behaving as you intended.





////////////////////////////////////////////////
END OF CODE ACADEMY BASICS 
////////////////////////////////////////////////:




