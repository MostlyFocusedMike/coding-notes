  _____                _   _        
 |  __ \              | | | |       
 | |__) |___  ___  ___| |_| |_ __ _ 
 |  _  // _ \/ __|/ _ \ __| __/ _` |
 | | \ \ (_) \__ \  __/ |_| || (_| |
 |_|  \_\___/|___/\___|\__|\__\__,_|
   _____ _                   
  / ____| |                  
 | (___ | |_ ___  _ __   ___ 
  \___ \| __/ _ \| '_ \ / _ \
  ____) | || (_) | | | |  __/
 |_____/ \__\___/|_| |_|\___|
-patorjk.com-

////////////////////////////////////////////////
123456789012345678901234567890123456789012345678
    WIDTH OF MINI PI SCREEN
////////////////////////////////////////////////


















????????????????????????????????????????????????
VARIABLES   
------------------------------------------------
/JavaScript/
var variable, anotherVariable, alsoGood2, o_k,
    $jQueryUseDollarSign, useCamelCase;

-don't use dashes, put them all in one statement
don't start with numbers or captials

________________________________________________

------------------------------------------------
/jQuery/

var $name = $("#nameID"),
    $class = $(".class"),

-the formula is $("") to select an element

________________________________________________

////////////////////////////////////////////////
////////////////////////////////////////////////


????????????????????????????????????????????????
ARRAYS/LISTS 


________________________________________________
/JavaScript/
var list = ["one", "fish", false];
var otherList = new Array("white",
                          "red",
                          "blue")

list[0] //"one", arrays start index 0
list[-1] //false, the negative mean from the end
         //so -2 is second from the end
list.length //length of items, so 3 (start at 1)
list.indexOf("one) //0, this returns the index

REMOVING ITEM/ADDING ITEM FROM LIST 
var myFish = ['angel',
              'clown',
              'mandarin',
              'sturgeon'];

myFish.splice(2, 0, 'drum');
 // insert 'drum' at 2-index position
// myFish is ["angel",
              "clown",
              "drum",
              "mandarin",
              "sturgeon"]
//Since you are deleting nothing, the deletCount
//parameter is 0

myFish.splice(2, 1);
 // remove 1 item at index-2 (that is, "drum")
// myFish is ["angel", "clown", "mandarin", "sturgeon"]

-Here's the syntax for .splice()
array.splice(start)
array.splice(start, deleteCount)
array.splice(start, deleteCount, item1, item2, ...)

CUTTING OUT A PART OF A LIST
Use the slice() method 
The slice() method returns a shallow copy of a 
portion of an array into a new array object 
selected from begin to end (end not included). 
The original array will not be modified.

var a = ['zero', 'one', 'two', 'three'];
var sliced = a.slice(1, 3);

console.log(a);     
 // ['zero', 'one', 'two', 'three']
console.log(sliced); // ['one', 'two']

Here's the syntax for .slice()

    arr.slice()
    arr.slice(begin)
    arr.slice(begin, end)

So if you only give one argument, it will create
a new array from that to the end

The way the begin and end count works is from
the beginning index, to before the end, like:

|0  |1  |2  |3  |4  |5  |
so slice(1,4) would give us 1, 2, 3. Not 4 
________________________________________________

////////////////////////////////////////////////
////////////////////////////////////////////////









































???????????????????????????????????????????????
FOR LOOPS

/JavaScript/
for (var i = 0; i < 10; i++) {}
    -standard method, an initialization, 
     a condition, and an update
for (i = 1; i < names.length; i++) {}
    -iterate through list, i declared elsewhere

for (i = 10; i > 0; i--) {}
    -starts at a high value, counts down

arr.forEach(function(elementInArr) {
    //code block that works on each individual
    //element
});
    -forEach() lets you aply a code block to 
     each individual element in a list, moving
     up one at a time (like a Python for loop)
________________________________________________

------------------------------------------------
/Python/

for name in names:
    //code

    -this has the varibale name be the current
     value of the item in the names list 

for i in range(10):
    //code

    -this mirrors the more traditional loop 
     that JS would use, a number in a range,
     starting at 0
________________________________________________

////////////////////////////////////////////////
////////////////////////////////////////////////

































????????????????????????????????????????????????
WHILE LOOPS 

------------------------------------------------
/JavaScript/

while (i < 10) {
  //things to do
  i++;
}

while (true) {
    if (something) {
        //things to do
        break
    } else if {
        //things
        continue
    } else {
        //code block
    }
    
    -notice that with while loops, it's normal
     for the counter variable to be declared 
     outside the condition (this thing)
    -conditionals can be true/false tests, or
     really any conditional, the loop will run 
     if that condition continues to be true
    -break keyword: exit the loop immediately
    -continue keyword: end current loop now, go
                       to next cycle of the loop 

do {
  //Code block
  i++;
} while (i < 10);

    -do while loops are the same as while loops,
     except that the code block always runs once
     no matter what since it comes before the 
     condition. It doesn't need to be a counter,
     it can have any true/false check
________________________________________________
////////////////////////////////////////////////
////////////////////////////////////////////////






















????????????????????????????????????????????????
CONDITIONAL STATEMENTS/COMPARISON OPERATORS

------------------------------------------------
/JavaScript/
OPERATORS
==  : equal to
=== : strict equal to
!=  : not equal to
!== : strict not eacual to
< > : greater than, less than
>=, <= : greater/less than or equal to

    -since JS has weak typing and coercion can
     change the data types of values, the strict
     operators check that both items are either
     the same data type or not. They give better
     more reliable results

LOGICAL OPERATORS 
||  = or ((a > b) || (c === d))
&&  = and ((a > b) && (c === d))
!   = not ( as in !(2 < 1) returns true, they are
        not equal)

Short Circuit Evaluation
-logical expressions are evaulated left to right,
so put the condition that will keep the whole
expression from being evaluated first, ie the
true statement always comes first in an "|| 
statement" becuase then it has to be true,
and the false statement always goes first in an
"&& statement" becuse then it has to be false.
In these situations, the program saves time by
not bothering to check the later conditions 


IF ELSE BLOCKS 
if (condition) {
    //code block
} else if (other condtion) {
    //code block
} else if (can use many) {
   //code block
} else {
   //code block
}

SWITCH STATE 
switch (level) {
    
    case 'one':
       title = 'lv 1';
       break;

    case 'two':
       title = 'lv 2';
       break;

    case 'three':
       title = 'lv 3';
       break;

    case 'four':
       title = 'lv 4';
       break;

    default:
       title = 'Welcome to the game";
       break;


IF ELSE vs SWITCH
-if else checks each and every condition no
 matter what, so they are a bit slower
-but, their conditions can have a range of 
 answers like if (i <100), whereas switch 
 cases only fire if they have an exact match
-switch cases stop running once they match the
 given variable to a case. you can use strings
 or numbers to trigger a case.
-switch statements get that default case, but 
 they don't have to use it
-if statements can stand alone as well, or have
 else if and else statements attached.
________________________________________________

------------------------------------------------
/Python/
________________________________________________


////////////////////////////////////////////////
////////////////////////////////////////////////




































????????????????????????????????????????????????
FUNCTIONS

------------------------------------------------
/JavaScript/
function getArea (width, height) {
    return width * height
}
var roomSize = getArea(2, 3);

    -this is your standard function, as you can
     see, you need to return a value to get 
     anything out of it
    -passing arguments match the parameters 
     position
    -variables defined in a function are 
     only in that function. two different 
     functions with variables of the same name
     will not conflict because the variables 
     have "function level scope" 
 
ANONYMOUS FUNCTIONS
var area = function(width, height) {
    return width * height;
}
var size = area(2, 3)

    Named vs Anonymous functions
    -named functions are declared and can be 
     called before they are declared becuase the
     script looks for variables and functions 
     before going through the script
    -anonymouse functions do not do this, 
     because they are where the interpreter is 
     expecting an expression, they are run when
     the interpreter gets to them
    -anonymous functions are also called 
     "function expressions"
    -anonymous functions are often used for 
     one time functions that don't need to be 
     called a lot, or great for event listeners

IMMEDIATELY INVOKED FUNCTION EXPRESSIONS
(IIFE)
    (function () {
       //your script 
    }());
    -this is a good thing to wrap your entire 
     script in to avoid naming errors with 
     other scritpts 

GETTING MULTIPLE VALUES OUT OF A FUNCTION
    function getArea(val1, val2, val3)
        combo1 = val1 * val2;
        combo2 = val2 * val3;
        combo3 = val3 * val1;    
        return [combo1, combo2, combo3]
        //or 
        //sizes = [combo1, combo2, combo3]
        //return sizes
    }
    
    var first = getArea(1, 2, 3)[0]
    var second = getArea(1, 2, 3)[1]
    var third = getArea(1, 2, 3)[2]

    -to get multiple values out of a function, 
     just return a list of the separate values

________________________________________________

////////////////////////////////////////////////
////////////////////////////////////////////////























????????????????????????????????????????????????
OBJECTS 
------------------------------------------------
/JavaScript/

var hotel = {
    name: "Quay",
    rooms: 400,
    booked: 25,
    pool: true,
    checkAvailability: function() {
        return this.rooms - this.booked
    }
};

-the properties are separated from values by :
-Property and method names do not need quotes,
 but their values that are string do.
-properties and methods are separated from each
 other by , not ;. The last thing on the object
 doesn't need a , 
-the this. refers to the hotel 

ACCESSING OBJECT PROPERTIES AND METHODS
    dot notation: 
    var hotelName = hotel.name;
    var roomsFree = hotel.checkAvailability()

    Square Bracket Syntax: 
    var hotelName = hotel['name'];
    var roomsFree = hotel['checkAvailability']();

    -typically you would use dot notation unless
     you are inserting a varaible to find the 
     property/method

CREATING A NEW OBJECT 
    literal notation:
    var hotel = {};
    hotel.name = "park";
    hotel.pool = "true";

    constructor:
    var hotel = new Object();
    hotel.name = "park";
    hotel.pool = "true";

    -literal notation is better, also note 
     that the initial example of an object 
     was literal notation. If you start with an 
     empty object, each new addition is 
     separated by ;, if they are created inside 
     the object, use a ,
    -however, if you want to create many objects
     instances use a function and constructor 
     notation

CREATING MANY OBJECTS
    function Hotel(name, rooms, booked) {
        this.name = name;
        this.rooms = rooms;
        this.booked = booked;
        this.checkRooms = function() {
            return this.rooms - this.booked;
        }
    }
    
    var quayHotel = new Hotel("quay", 40, 25);
    var lHotel = new Hotel("L", 133, 124);

    -object constructor functions like this 
     should have capital names
    -Don't forget the "new" keyword
    -Access stuff with dot or bracket: 
        quayHotel.name //would be "quay"
    
________________________________________________

//////////////////////////////////////////////// 
//////////////////////////////////////////////// 





























????????????????????????????????????????????????

//////////////////////////////////////////////// 
//////////////////////////////////////////////// 





































????????????????????????????????????????????????



????????????????????????????????????????????????
SELECTING HTML ELEMENTS

------------------------------------------------
/JavaScript/
var ham = document.getElementById("id")
class = document.getElementsByClassName("class")
tag = document.getElementsByTagName("tag")
________________________________________________

------------------------------------------------
USING THE DOM
document.querySelector(".class #id tag")
 -returns the first instance of element as 
  specified by CSS style selector to get a list
  of each occurence us 

document.querySelectorAll("same as up there")
 -This returns a list 
________________________________________________


A note on these "lists"
 -Any of the above methods that return more 
  than one object are not returning lists, 
  they are returning HTML Collections, or 
  either Node Lists. A Node List is the result
  of a selection of of HTML nodes, and a 
  version of this is an HTML collection, which 
  is only element nodes. (Or a jQuery object, 
  which is also essentially a node list, but can
  be manipulated with special jQuery methods.)

  These are "array-like" objects, array methods 
  like slice, indexOf won't work on them. You 
  must convert the selection into an array:

arr = Array.prototype.slice.call(pastItemsList),

  then you can use array methods like this: 

indexNum = arr.indexOf(item), 

 

//////////////////////////////////////////////// 

