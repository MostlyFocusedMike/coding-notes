TABLE OF CONTENTS 


1SSSS    DAY 1 NOTES 
2SSSS    DAY 2 NOTES 
3SSSS    DAY 3 NOTES
5SSSS    DAY 5 NOTES
6SSSS    1st weekend hw


mod21SSSS    Mod 2 day 1
==============================================================
1SSSS    DAY 1 NOTES 
==============================================================
**video lectures** 
 -lectures are recorded and can be accessed later 


**sandwhich pattern** 
 -do not do this 

    def method 
      result = nil
      
      # a bunch of code 

      result
    end 


**red,green,refactor**
 -when writing code with rspec, firs you want to turn 
  the red fail lines into green passing lines, and only 
  then do you worry about refactoring for elegance

TODOS
 [CHECK] -RSPEC --fail-fast 
 [CHECK] -using * with strings 
 [CHECK] - def between select and find_all
 [CHECK] - #respond_to?


**resources** 
https://learn.co/tracks/web-development-immersive-2-0-module-one/introduction/logistics/campus-reference-materials
 -here are several new resources 

 -here is a series on product management
  https://www.youtube.com/playlist?list=PLJqijKi-heknXOAeVAy6w18LRmZtZUsgn
 
 -here are all the recorded guest lectures:
  https://www.youtube.com/playlist?list=PLJqijKi-hekkiQeHO0U1B-B_0ipApHI1c

 -and here are several women in tech playlists
  https://www.youtube.com/playlist?list=PLJqijKi-hekk7_lrwzaMHdZLpOxpEjSwv
  https://www.youtube.com/playlist?list=PLJqijKi-hekmciERuRcHJR507HMAEWAMH




==============================================================
2SSSS    DAY 2 NOTES 
==============================================================
**what are gems?**
 -the good gems to use are 
  
    rest-client
    JSON

 -to look up gems, do rubygems.org

**learn schedule**
 -your learnco homepage has the week's schedule and in the c
  curriculum tab should have the day's schedule

TODO 
[ ] -brief lookup of RESTful APIs  
[ ] -google books api lookup
[x]-using ranges to get slices of arrays 
[X]-download slack app on phone




==============================================================
3SSSS    DAY 3 NOTES
==============================================================
TODO 
[X] -explain private methods




==============================================================
4SSSS   DAY 4 NOTES 
==============================================================
TODO
[ ] -research exactly how gems works and the bundle install gem
[ ] -play with a class method that modifes all instances 
[ ] -what is ruby static variables
[ ] -how to initialize an object has_many belongs to relations






==============================================================
5SSSS    DAY 5 NOTES
==============================================================
TODO
[ ] -check main notes for TODOs
[ ] -ensure that you have single source notes in many object 
[ ] -notes on the many to many relationship
[ ] -update section on the importance of runners and how they
     link up many files into one space 
[ ] -fix it so that you say initializing a belongs to object 
     with the has many object in it is the better way to do it
[ ] -class constants vs class variables, the constants add an
     extra layer of protection to prevent reassignment, the 
     scope and instance objects access and everything else are
     the same value 
[ ] -constants are available anywhere within their SUB scopes
     so in the main scope, all methods have access to it 
     but in each methods constants can't be accessed from the 
     main scope (one scope up) 
[ ] -look up memoization

-find and select default to truthiness in the block if no
  comparison operator is given
[ ] -adding default variables using hashes and fetch 





==============================================================
6SSSS    1st weekend hw
==============================================================
NOTES: 
 -sql GROUP BY defaults to ascending order of the thing it is
  grouping by, so if it's text, it's alpha, ints is numerical
 -GROUP BY ... HAVING was invented becuase WHERE statements 
  can't support aggregate functions like COUNT

==============================================================
???SSSS  notes
==============================================================
-CRUD create, read, update, delete 
 -create is reate table and insert 
 -read is gonna be like select
 -update is update 
 -and delete is delete from and drop
 -these four functions are basically what every application
  does ever 

*define SQL
*sqlite vs sqlite3
*explore data with sqlite3 
*perform CRUD actions on table 
*perform CRUD across tables

DAYNOTE
TODO
 -ruby file paths know to look for files? 
 -learn how to integrate sql and ruby
 -SQL how treats white space is that it just ignores it 
  until it hits another word 
 -ruby sql ; is optional if one statment, it is required
  if you do more than one
 -ruby will create new db if not created already
 -sqlite3 foriegn key an no delete thing
 -are table names case sensitive YES




==============================================================
gems2SSSS    bundle install and gem files
==============================================================

**gemfile**
 -tells ruby what dependencies the project has

    source "http://rubygems.org"

    gem "sqlite3"
    gem "pry"

 -that's a very simple gem file 
 -that source is the ruby gem main repo and tells ruby
  where to get the gems
  -that site also has al the docs and bug trackers 
 -now the bundle install looks for this file, then downloads
  any of the gems (or specific versions of gems) to your
  computer so the files will run
   -the source can be links to other places like github 
 -then it will resolve the dependencies
  -each gem might depend on another unlisted gem, so if 
   that is the case, bundle will install them as well
  -bundle info GEM-NAME will show you where it was installed
   and all gems are installed globally
 -when it is done, bundle install creates a gemlock file, 
  which shows you where each gem came from and what, if any
  dependencies it also loaded
 -you do have to actually gem install bundler if you don't 
  have it, think of it like a package manager
 -include it in all your github code for eas of use
 -TODO
  -is Gemfile.rb case sensitive
 




==============================================================
folSSSS    Folder structure 
==============================================================
**basic structure**
 bin/
  -run.rb
config/
  -environment.rb
db/
  -music.rb
lib/
 **main program files here**
Gemfile.rb
Gemfile.lock
README.md
 
 -our bin/ will contain our runner file and anything else 
  needed ot actually run the file 
 -config/ is environment.rb contains and matches all 
  the require relatives and file loading that we need for
  our program, this file is then required in our runner
 -inside environment.rb: 

    requrie 'bundler'
    Bundler.require
 
 -what Bundler.require does is save us from having to do 
    
    require 'each-individual-gem'

 -so it's a time saver   
 -and lib is where your program files are stored




==============================================================
22SSSS     DAY 2 WEEK 2 
==============================================================
TODO
 -mass assignment 
 
 -responds_to?




==============================================================
23SSSS     DAY 3 WEEK 2
==============================================================
TODO
 -inheritance class constants allows for overwriting
 -class variables however would be overwritten for ALL 
  classes everywhere at once whenever it is reset in any 
  level of the class

 ORM conventions: 
    -new = make object in memory
    -save = put object in database 
    -create = put object in memory and db at once 

 the parent class in ORM with all the standard actions 
 is generally called generic_model.rb 
 -it is in a module now, but it could simply be inherited from 
  a class, not always a class in a module 

    module GenericRecord 
      class Base 
        def self.table_name 
            # create new table name from class 
        end 
        
        def self.delete(id)
          # delete the thing from the table  
        end 
    
        def self.all
          # return a list of memory objects based of table
          # rows 
        end 

        def self.column_name
          # return all the table columns 
          # TODO PRAGMA is a sqlite3 meta data
          # this is how you get instance column names at the 
          # class level
          sql = "PRAGMA table_info(#{table_name})
          # this returns a lot of stuf "pk" is primary key
          results = DB[:conn].execute(sql)
          # this is an array of hashes, each hash is a column
          results.map do |column|
            column.name
          end
        end 

        def self.primary_key
          sql = "PRAGMA table_info(#{table_name})
          results = DB[:conn].execute(sql)
          results.find do |columns|
            column.pk == 1 
          end["name"]

        end

        def initialize(attributes)
          # set up any method possible
          key = self.primary_key.to_sym # we're storing them
                                        # as symbols, but we
                                        # could use str, whic
                                        # wouldn't need 
                                        # conversion
          val = attributes[key]
          self.instance_variable_set("@{key}".to_sym, val)
        end

        private 

        def mass_assign_attributes(attributes)
            # create mass assignments
        end 
      end 
    end









==============================================================
mod21SSSS    Mod 2 day 1
==============================================================

**CRUD in relation to the web**

**web stuff** 
 -recieve request (controller + model)
process request (contoler + model)
build response  (view) + model)
send response (view) + model)


**postman**
 -download it 
https://www.getpostman.com/

 -useful for testing 
 -this program is useful for sending out get/post requests for
  testing by seeing your response in a few different ways 
 
**server and Rack**
 -it opens up our computer to listen to requests 
 -get the Rack gem 
 -shotgun is useful for not always reloading 
 -you also need a controller class ussually called Application
  or App
 -the only imortant thing is that it will have a call method 
 -the call must return a status code, headers, and a body
 -it will be assembled into an array 
 -you will also need another file called config.ru, which 
  is essentially the runner file of Rack

 -if you wanted to build your own Rack, you would use 
  WebBrick 
 -bakc in the terminal, you can see your server log, which
  will relay to you all the requests made to your site

 -we really don't do anything with rack other than to see that 
  it basically sets up a server 
 -it is useful to see the environment hash 

 -how was the user agent developed? BLOG POST IDEA TODO

 -you can use binding.pry to see stuff in the environment 
  however the page itself will never load 

**ReST**
 -REpresentational State Transfer is just a convention 
  or pattern that says certain URL's should always do certin 
  things

 -a familiar but older pattern is SOAP, and there's now one 
  called GraphQL
 -they are all just patterns to ask a web server
 -here are the 7 things that REST does (the default actions)
 
  index 
  show 
  new 
  create
  edit 
  update
  delete 
  
 -and it will map these actions into CRUD functionality
 -like this : 

 index - read - it's like listing out all resources 
 show - read - it's the find, and it says one specific thing 
               from index 
 new - read  - this will let users get to a new form to 
 create - create - a new instance in the database 
 edit - read - in memory edit with a for before you...
 update - update - update the actual item in the db 
 delete - delete - delete it from the db 
 

 so these would be mapped to urls like: 
  
  actions | urls 
----------------------------------------------------
  index : | root/users 
  show :  | root/users/1 (the user id in the db 
  new :   | root/users/new (the sign up form 
  create  | root/ (post requests do not alter urls)
  edit :  | root/users/1/edit (edit a user) 
  update  | root/users/1
  destroy | root/users/1 (a read vs a write 

  
 http verbs 
 POST        create
 GET         read 
 PUT/PATCH   update (it should be PATCH in most edit cases)
 DELETE      delete 

 PATCH vs PUT 
 -patch takes something that already exists 
 -put will give the whole thing but an updated version


**Sinatra setup**
 
 app -
  adapters -
   google_dogs_api.rb
   # adapters are programs that engage with the outside world
   # like when you made the starwars api thing
  controllers - 
  models - 
    dog.rb 
  views - 


 -puts for debugging is useful because it will log it o
 -in the get "/" block of sinatra, don't use return, it's not
  a method 

 to get access to your posted/or any sent information 
 you can use params.class

**post sinatra**
 -

 # app.rb 

  post '/books' do 
    book = Book.create(params) 
    redirect '/books/book.id'
  end 

  get '/books/:id' do
      
  end 
    
  
  end 

  in the form, you can send the action to '/books' it does not
  have to literally be the name of the file 
 -params is the parameters that get sent over from a form 
 -it's a type of "super" hash that is made up of the "name" and
  "value" from the form inputs
 -the "params" hash is from rack, and it will only show you
  the inputs that have a name value 
 -
**post and postman**
 -postman is useful for testing without needing to see the  
  browser 
 -it will let you send various ways, but forma data is the 
  easiest to start 
 -this is gret for testing the data you want before figuring
  out how to format the form 

**dynamic routing** 
  /books/:id 
 
 -that :id is going to pass whatever comes there in the url
  as a key and value 

    /books/30 

   {"id" => "30"} 

 -that's what that turns it into

**redirect** 
 -use the redirect method to tell it to go to abother page 
 -all it takes is an argument 
 -the redirect will make a new request 
 -redirect is by default a get method




**instance variables**
 -the reason for these is to pass them into erb files, because
  erb does a metaprogramy thing where it looks for all the 
  instance variables




















==============================================================
22SSSS     Mod 2 day 2 
==============================================================
**
where do you put code that doesnt go with at database?
 -typically, it goes into a lib folder, since models are 
  for classes that respond to the db 

-http is "stateless" it cannot remember anything about its 
 session 


folder 

  app-
    adapter-
      starwarsapi.rb
    lib-
      codestuff.rb
    models-
    controllers-
    views- 
  config-
  db-

 -to set your views, config.ru should be in the root, then
  tell sinatra where your views is in relation to that 
 -so app and config.ru are on the same level most cases, all
  we have to do is put this in our application controller.rb
  (which is in /app/controllers/ file) 

    set :views, "app/views"

 things to note: 

  instance variables to get them into erb files

 -controllers (get '/' stuff) should do two things: 
    grab information from db 
    render or redirect a view 
 
 -NOT actually build any html 

 http only knows GET and POST 
 -to get more meaningful versb like PATCH or DELETE 
 -you do this with :method_override 

 -sinatra.com/configuration.html
   this is where you can see this 

 -so to do this use a hidden input 

  <input type="hidden" name="_method" value="patch">
 
 -now you can use 

 patch '/books/:id' do 

  end

  in your controller 

 -#dup method creates a duplicate of an object 

 -GETS controllers are the only one that should render a view,
  all others should redirect to a get path (like a POST should
  redirect to a get path )

 -dynamic routes should ALWAYS come after non dynamic: 

    /recipes/new 

    /recipes/:id 

 -if you don't it will try to put 'new' as the key to :id
 -now, it will check new first, then hit new, and if it get s 
  1, it will rightfully skip over new and land on the 
  dynamic route






==============================================================
23SSSS     mod2 day 3
==============================================================

 -creating a new migration the name convention is 
  
    rake db:create_migration NAME=create_authors 

    which makes the class CreateAuthors
    which will then create the table authors 

 -it's fine in the new table migration and then alter other
  tables that refer 
 -so in create_authors, you could add_column to books 
  and that column is author_id  
 -if they are logically linked it's fine

**creating multiple controllers** 
 -make the files like so 

  controllers-
    app.rb 
    books_controller.rb 
    authors_controller.rb 

 -so our bas controller class ApplicationController in app.rb
  inherits from Sinatra::Base, but in our 
  class BooksController it inherits from ApplicationController
 -authors_controller will also inherit fro mApplicationController
  as will any other controllers 
 -now, to make sure that our oup knows about this in fonfig.ru

  use BooksController 
  use AuthorsController 
  run ApplicationController 

 -that tells sinatra what controllers to use, and always 
  end with the running of the main controller, since this 
  technically starts the server 
 -TECHNICALLY you can have all sub controllers from Sinatra::
  Base, but it's repetative and blah blah 
 
**views folders**
 -next 

  #authors controller 

  set :views. "app/views/autors" 
  ...
  get '/authors' do
    erb :index.html
  end 
 OR 

  get '/authors' do 
    erb :'authors/index.html'
  end 

 -the top one tells Sinatra where this controllers views root
  is 


 -using nested hashes is a good way to "sanitze" your data so
  that the hash you want is ALL you want, no "_method" or "id"
  which will get passed to params, but not params[:author]

 -titlecase is an acive record mehtod that capitalizes every
  word in the string 

  "ok friend let's go".titlecase 
  => Ok Friend Let's Go

 -NOTE: look up the 
    has_many_obj.belongs_to_array << belongs_to_obj

 -this will set the author_id on that row in books to 

**select input** 
 <select name="author_id">
   <option value="1">Jon Gable</option>
    TODO dynamic
   <option value="<%= author.id

 </select> 

generate rails migration 

 bin/rails generate migration MigrationClassName


rails g model Cheese name:string age:integer smelliness:integer

-that is the basic way to generate a model, migration file and
  

 class CreateCheeses < yeadadadadad
   def change 
    create_table :cheeses |t|
      t.string :name 
      t.integer :age 
      t.integer :smelliness

      t.timestamps
    end 
  end  

rails g controller cheeses

class CheesesController < ApplicationRecord 

end 

 inside rails c, the way you see your routes is with "app."
 so here we aliased curds instead of cheeses: 

 app.curds_path 
  "/cheeses"
 app.curds_url
  "http://www.example.com/cheeses" 

 byebug is a rails gem that works pretty much exctly like 
  pry

form_for and form_tag are the two main options for building 
  forms 


 -you can't use mass assignment without creating a permit
  function to essentially tell rails it's ok to add only these 
  specific databases


REVIEW NOTES MAY 22 for rails 

  resources 'brews', except: [index]
  vim: command control arrow keys how to 






THINGS TO UNDERSTAND 
 -text_field(_tag)
 -lable_field(_tag)
 -select 
 -options 

 -check buttons 
 -.build, create, << make sure you understand these 3 
 -generate controller, model, 
 -basic formats for indexing all items 
 -basic format for 7 rest routes 
 -resources only and except 
 -radio buttons 

apirubyonrails/classe/aactiverecord/associations/classes 


