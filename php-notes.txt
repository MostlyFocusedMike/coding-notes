PHP PHP PHP PHP
  \_____|_____/_____/ ______  _____  
 | \ | |/ __ \__   __|  ____|/ ____| 
 |  \| | |  | | | |  | |__  | (___   
 | . ` | |  | | | |  |  __|  \___ \  
 | |\  | |__| | | |  | |____ ____) | 
 |_| \_|\____/  |_|  |______|_____/ 

////////////////////////////////////////////////
123456789012345678901234567890123456789012345678
    WIDTH OF MINI PI SCREEN
////////////////////////////////////////////////

////////////////////////////////////////////////
          PHP Basics 
-PHP stands for "Hypertext Preprocessor"
-.php files can contain html, css, js, php, and
  text
-.php files are executed on the server and 
  returned to the browser as plain HTML

What can PHP do? 
-PHP can generate dynamic page content
-PHP can create, open, read, write, delete, 
  and close files on the server
-PHP can collect form data
-PHP can send and receive cookies
-PHP can add, delete, modify data in your 
  database
-PHP can be used to control user-access
-PHP can encrypt data

Why use PHP?
-free, runs on all major OS's, compatible with
  almost all servers, supports a wide range of
  databases, and it's free.

How to get started
-most web hosts support PHP and MySQL already,
  so you just put PHP files into your project
  and they will run like normal


////////////////////////////////////////////////

////////////////////////////////////////////////
          PHP 5 Syntax

BASIC FILE ACCESS 
-.php files can go anywhere in the script
-here is the syntax for a .php script:

        <?php
          echo "hello world!";
        ?>

-Notice the semicolon for the line, and the 
  opening "tags" 
-That example prints text to your screen, but
  you can add html tags to style it.

COMMENTS
Below are examples of the types of comments:

    <!DOCTYPE html>
    <html>
    <body>

    <?php
    // This is a single-line comment

    # This is also a single-line comment

    /*
    This is a multiple-lines comment block
    that spans over multiple
    lines
    */

    // You can also use comments to leave out parts of a code line
    $x = 5 /* + 15 */ + 5;
    echo $x; //10 since the 15 is blocked
    ?>

    </body>
    </html>
-// and # are single /**/ are multiple
-note the inline comment that uses /**/ to block
  out the 15

CASE SENSITIVITY
-In PHP, all keywords (e.g. if, else, while, 
echo, etc.), classes, functions, and 
user-defined functions are NOT case-sensitive.

    <!DOCTYPE html>
    <html>
    <body>

    <?php
    ECHO "Hello World!<br>";
    echo "Hello World!<br>";
    EcHo "Hello World!<br>";
    ?>


    </body>
    </html>
-All those examples work 

-HOWEVER, variable names ARE case sensitive:

    <!DOCTYPE html>
    <html>
    <body>

    <?php
    $color = "red";
    echo "My car is " . $color . "<br>";
    echo "My house is " . $COLOR . "<br>";
    echo "My boat is " . $coLOR . "<br>";
    ?>

    </body>
    </html>

-In this example only $color would print to
  screen, the others would simply be left 
  as if nothing were there

////////////////////////////////////////////////

////////////////////////////////////////////////
        PHP 5 VARIABLES 

-Like Sass, PHP uses $ to denote a variable
-You don't need a keyword to create a 
  variable, it is created the moment you assign
  a value to it.

<?php
$txt = "Hello world!";
$x = 5;
$y = 10.5;
?>

NAMING RULES 
-Here they are: 
-A variable starts with the $ sign, 
  followed by the name of the variable
-A variable name must start with a letter or 
  the underscore character
-A variable name cannot start with a number
-A variable name can only contain alpha-
  numeric characters and underscores 
(A-z, 0-9, and _ )
-Variable names are case-sensitive 
($age and $AGE are two different variables)

PHP IS LOOSELY TYPED
-It's like JS, so be aware of this 

VARIABLE SCOPE 
-PHP can declare variables at any point in the 
  script. there are 3 different scopes:
    -local
    -global
    -static

GLOBAL AND LOCAL SCOPE
-A variable declared OUTSIDE a function is in 
  the global scope and can only be accessed
  outside a function:

		<?php
    $x = 5; // global scope

    function myTest() {
        // using x inside this function will generate an error
        echo "<p>Variable x inside function is: $x</p>";
    } 
    myTest();

    echo "<p>Variable x outside function is: $x</p>";
    ?>


-a variable declared WITHIN a function has 
  Local Scope and can only be accessed within
  that funciton: 

    <?php
    function myTest() {
        $x = 5; // local scope
        echo "<p>Variable x inside function is: $x</p>";
    } 
    myTest();

    // using x outside the function will generate an error
    echo "<p>Variable x outside function is: $x</p>";
    ?>

-Normally, when a function is completed/
  executed, all of its variables are deleted. 
  However, sometimes we want a local variable 
  NOT to be deleted. We need it for a further
  job.

-To do this, use the static keyword when you 
  first declare the variable:

    <?php
    function myTest() {
        static $x = 0;
        echo $x;
        $x++;
    }

myTest(); //returns 0
myTest(); //returns 1
myTest(); //returns 2
    ?>


//////////////////////////////////////////////////////////////////////////////
      CODESHCHOOL NOTES:

 -you can't use php code in an html file, the server won't know that it needs
  to process and render the php lines in an html file
 -you just change your .html file to a .php file 
 -.php files read html and js perfectly, they just allow the server to render
  the page before sending it to the browser 
 -the server validates the php to make sure it's formatted, then processes it
  and then renders it 

**Writing php code**

 -all php must go within the php tags like so: 

  ...
    <?php 
      //your php goes in here
    ?>
  ..
 
 -php the main bulk of your php code is ussually on top of the html in a .php 
  file, with some of the php variables being sprinkled as needed in the 
  html part of the file:

  <?php 
    $vari = 'hello world';
    $vari_2 = 'goodbye world';
  ?>
  <html>
  <body>
    <h1><?php echo $vari ?></h1>
    <p>Welcome to my site</p>
  </body>
  </html>

 -note: each line of php ends with a semi-colon unless it is only one line long
  like the example in the <h1> tags
 -all php in a file can reference the php elsewhere in that file without any 
  special references, just put the code you want to use in a <?php ?> tag and 
  it will run 


**php variables**
 -php variables are always assigned and called with a $
 -they can only start with letters or underscores (_), dashes (-) are not
  allowed anywhere in the variable, underscores can be used where ever, and 
  numbers can be used anywhere except the first space 
 -variable names are case sensitive so be aware

    $acceptable_name3 = 'ok'
 

**strings, concatenation, and quotes**
 -single and double quotes mean different things in php
 -like bash, ' ' means that anything inside is not to be processed at all, 
  while anything inside " " will be processed 
 -this means there are two ways to concatenate a variable into a string: 

    echo 'hi my name is ' . $name; //this is concatenation
    echo "hi my name is $name"; //this is called string evaluation

 -the single quotes need the concatenation operator, the period, since the 
  strings are not processed at all
 -the double quotes do not, since the server knows that the things inside the
  string could be a variable that needs to be processed 
 -php is ever so slightly faster when using the single quotes and concatenation
  since the server doesn't waste time interpreting things that don't need to be
 -you can use double quotes and concatenation, it's just redundant
 -to use a single quote character inside a single quote string, use the / to 
  escape the character 

    echo 'how/'s your day?'
    echo 'use two // to escape the second //"


**echo and print to put words on screen**
 -echo can use () or not, generally it does not 
 -echo technically prints words into your .php file, so without putting 
  the echo statement into tags, or tags into the echo statement, 
  it would be like just writing text into an html file. they will appear 
  on screen with not formatting 
 -also, multiple echo statements next to each other will print together 
  with no spaces, unless separated by other tags 

    echo 'hello world'; //orders of magnitude more common 
    echo('hello world'); 
    echo $var; //you don't need quotes if there are no strings in the echo
    //these two will print "hello worldhello world" to the screen, so: 

    echo '<h1>hello world</h1>';
    ehco '<br />';
    <p><?php echo 'this will be a paragraph now' ?></p>

 -notice you do not need to do anything special to echo when putting tags 
  inside it.
 -in addition to echo, you can also use the print function, it works identical:

    print 'this is the same sytax as echo'

 -the differences between print and echo are: 
    -print is eeeever so slightly slower than echo
    -print has a successful return value of 1, so it can be used in expressions
      echo has no return value
    -echo can take multiple arguments, though this is exceedingly rare


**php data types**
 -here are the basic data types for php: 

  $strings = 'text';
  $integers = 1;
  $floats = 12.22;
  $booleans = true; //or false, just use no capitals or quotes 
  //if you echo a false boolean, nothing will appear, if you echo a true 
  //true boolean, a 1 will print
  $arrays = array('hey', 'there', 'world');
  $also_array = ['this', 'works', 'too'];
  $associative_array = array('name' => 'michael', 'age' => 25)
  $associative_array_2 = ['name' => 'michael', 'age' => 25];

**more on arrays**
 -arrays are just a map of values at indexes, those indexes are either the 
  actual number of the index, or a key in a key value pair
 -there are index arrays that are accessed by index, and associative arrays 
  that are accessed by key value pairs 
 -to create an empty array do: 

      $arr = array();
      $or_arr = [];
 
 -to create an index array, just separate values with commas, but to make
  an associative array, use the => operator (in js it's a : instead) to 
  create key value pairs, then commas after each pair

      $arr = array('ham' => 'cheese', 'cat' => 'dog')
      //you could also use the brackets shorthand to do this
      // that => is called an array operator

 -you access data in an array by index, or key: 

      $arr[0];
      $or_arr['key'];

 -to print an array, echo and print will not work: 

      echo $arr //this will print "Array" to the screen
 
 -to print the contents of an array, you must use the print_r function: 

      print_r($arr);
        Array (
        [0] => Hoba
        [1] => Cape York
        )

 -print_r will print both associative and indexed arrays 
 -however, echo does work on single indexes of an array: 

    echo $arr[0];
    echo $or_arr['key'];

 -modifying an array: just re assign that index like so: 

    $arr[2] = 'loco';
    $arr['bye'] = 'saying farewell';
___________
 -adding to the end of an array: with index, use an empty bracket: 

    $arr[] = 'new item';
    //now 'new item' is the new last item in the array 

   -to add a new key/value pair in an assosciative array, just define them:

    $arr['new key'] = 'new value';
    //the new key/value will be added to the end of the array 
________________
 -adding to the beginning of an array: use the array_unshift function: 

    array_unshift($arr, 'value'); //you can also add multiple values in order
    array_unshift($arr, 'value', 'value2', 'value3'...); 

  -array_unshift also has a return value of the new number of items in
    the array, so if it's in the definition of a variable, it will be the 
    number of items in the array, not the array itself
    $array_count = array_unshift($other_arr, 'values')
    echo $array_count //this would display "4", not the actual array
                      //and you can use echo in this case, or print_r

  -It's slightly more tricky to add an key/value pair to the beginning of an
   array.
  -what you have to do is create a new array with the key/value pairs you 
  want to add to the beginning, them use array_merge with the new array in 
  front and the old array in back 

    $a=array('color1'=>"red",'color2'=>"green");
    $b = ['a', 'b', 'c'];
    $c = array_merge($a, $b); 


**array differences to python**
 -unlike python which separates lists and dictionaries, it's clear to see 
  in php (and js) that both of those objects are just arrays 
 -associative arrays, unlike dictionaries do NOT default to a random order,
  they maintain the order of when each pair was added
 -you can actual use both index and association to add items to a single 
  array, since an index and associative array combined outputs to: 

    $arr = [0 => 'value 0', 1 => 'value 1', 'ham' => 'cheese', 2 => 'value 2']
 
 -note that the key/value simply goes between the indexes, it does not occupy
  a numerical index, no matter how many you insert. The next numerical 
  index will pick up where the last one left off.


**multi-dimensional arrays**
 -you can put arrays in arrays no problem: 

  <?php
  $games = array(
    'tabletop' => array(
      'sorry',
      'monopoly',
      'scrabble'
    ),
  );
  
  $games['tabletop'][0] //this would be 'sorry'
  $games['tabletop'][0] = 'ice breaker' // now 'sorry' becomes 'ice breaker'
  print_r($games{'tabletop']) //this would print: 
    //Array ( [0] => 'ice breaker'
              [1] => 'monopoly'
              [2] => 'scrabble' )

 -as you can see, all the regular functions and syntax sticks when you use 
  another level of array, and you can go as deep as you want 

**array functions**
 -find number of items in an array: 
  
  echo count($arr); //this would lets say be 5 
  //you could also take advantage of array_unshift return value 

 -join values of an array into a string: 

    echo implode(' ', $arr) // that first argument is the character that 
        //will go between the values, in this case a blank space 

 -randomize the order of elements in an array 
  (remember, unlike python, arrays stay in their entered order):

    shuffle($arr)
    echo implode(' ', $arr) //this would show the new array order as a string

 -to sort an array in alphabetical order: 

    asort($arr);
    echo implode(' ', $arr) 


___________________________________________________________________________
        Level 3 Conditionals and operators

 -arithmetic operators are exactly what you'd expect: 

    +, -. *, /, **, % = add, subtract, divide, exponents, modulo

 -conditional statements are also the same as js: 

    == = equal 
    >= = greater than or equal
    <= = less than or equal 
    != = not equal to
    === = equal value andi data type 
    // so 10 == '10' is true, but 10 === '10' is false, 
    // since its str and int and they don't match
    // >== and <== do not exist in php 

  -When converting to boolean, the following values are considered FALSE:

    the boolean FALSE itself
    the integer 0 (zero)
    the float 0.0 (zero)
    the empty string, and the string "0"
    an array with zero elements
    the special type NULL (including unset variables)
    SimpleXML objects created from empty tags
  
  Every other value is considered TRUE (including any resource and NAN).


**control flow**
 - if statements are the same as js : 

    if ($year == 2001) {
      echo 'neat';
    }

 -if else are the same too: 

    if ($year == 2001) {
      echo 'neat';
    } else {
      echo 'dang';
    }

 -you can use elseif with or withou brackets, and else if only if you 
  have brackets. with brackets, the two are basically the same, there 
  seems to be some minor differences that you can look up if it ever 
  becomes relevant (it seems a descendent of the C language): 

     if ($year == 2001) {
        echo 'neat';
      } elseif ($year == 1990) {
        echo 'ok';
      } else {
        echo 'dang';
      }
 
 -you can put as many else if statements in as you want, but be aware, the 
  first true one that the program finds will be executed while all others 
  are ignored 

**logical operators**

  same as js again: 

    && = and
    || = or
    !  = not 

 -they are used in conditionals like: 

  if ($year >= 1990 && $year != 2010) {
    //do stuff
  }

**setting variables inside if conditionals**
 -you can set a variable's value inside an if statement like so: 
  
    if ($ham = 'hello there') {
      echo $ham // this will print hello there
    }

 -since the variable will be given a value, that is evaluated to be true,
  HOWEVER, you can assign that variable a "falsey" value, like '0' and 
  the if statment will not run, like so: 

      $thing = '0';
      if ($ham = $thing) {
        echo $ham;
      } else {
        echo 'general kenobi';
      } // this time it will print general kenobi becuase the value of '0' is
        // false 

____________________________________________________________________________
        LEVEL 4 LOOPS 
    
 -you know what loops do, here are how they look in php: 

**while loops**
 
    $i = 0; //initialize an integer 
    
    while($i <= 10) { //test the condition is true 
      echo $i; // run code as long as the condition is true
      $i++ // increment tells your code what to do to the integer 
    } // notice there is no space for while(  and the (

 -the increment has 4 options: 

  $i++ = return $i value, then increase by one 
  ++$i = increase i value by one, then return the new value
  $i-- = return $i value, then decrease by one 
  --$i = decrease i value by one, then return the new value 

 -you could also use something like: 

    $i += 2 //increase each time by two 

 -while loops do not have to rely on numbers either, they can be any 
  conditional that relies on user input: 

    while ($answer = 'hello') {
      // user input that can change the value of answer 
      // to avoid an infinite loop
    }

**do while loops**
 -while loops will not execute even once if the original condition is 
  found to be false. 
 -a do while loop wil execute the code block once, no matter if the 
  condition is true or not, becuase the test comes after the block has 
  been executed: 

      $i = 0;
      do {
          echo $i;
      } while ($i > 0);
      // this will echo 0, then go on to the next part of the code 


**for loop**
 -for loops have the same syntax as JS: 

  for($i = 0; $i < 10; $i++) {
    $value = $i * 12;
    echo value;
  }


**foreach loops**
 -to loop through index arrays and associative arrays, you need to 
  use a foreach loop

  -index array/just the associative values syntax: 
   -it's basically the array, then as, then the variable name that 
    will store the value of the index's value: 
  
      foreach($arr as $value) {
        echo $value //this will show not the index, 
                    //but the value stored there
      }

  -key/value syntax 
   -it's basically the same, you still use the as keyword,
    but then you use two variables, the key variable then 
    an array operator, then the value variable

    foreach($arr as $key => $value) {
      //this will let you access the variables at the index and 
      // at the value stored in that index 
    }

 NOTE: you can of course call the arrays, indexes, and values 
  whatever you want 
  
    
**combining**
 -of course you can combine all of these types (and more) together 
  quite easily: 

  $meteors = array('hoba' => 60000000 //more stuff);
  $epic = 600000000;
  $huge = 400000000;
  foreach($meteors as $name => $weight) {
      if ($weight > $epic) {
        echo 'damn';
      } elseif ($weight >= $huge) {
        echo 'shoot';
      } else {
        echo 'sorry, ' . $name . ' is just too small';
      }
  }
