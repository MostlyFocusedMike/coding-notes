==============================================================
                  intro 
==============================================================
 -RSpec is a unit test framework for the Ruby programming 
  language. 
 -RSpec is a Behavior driven development tool. 
 -this means rspec focuses on what gets done, not how
 -RSpec is a DSL, a Domain Specific Language, which means
  its built atop Ruby to add extra functionality

**RSpec Environment**
 -rspec is a ruby gem so install with:

    $ gem install rspec
 
 -in linux you ,ight need sudo


**Hello World**
 -To get started, let’s create a directory (folder) to store 
  our RSpec files. 
 -make a folder for your project, then in that folder make a 
  "spec" folder
 -We are going to store our RSpec files in this folder. 
 -RSpec files are known as “specs”, whigh stands for 
  specifications

 -Since, RSpec is a BDD test tool, the goal is to focus on 
  what the application does and whether or not it follows 
 -this is becayse rspec is testing whether program meets a
  behavioral specification, oft described as a"user story"
 -inside practice/spec make a file hello_spec.rb and put:

    class HelloWorld

       def say_hello 
          "Hello World!"
       end
       
    end

    describe HelloWorld do 
       context “When testing the HelloWorld class” do 
          
          it "says 'Hello World' when we call the method" do 
             hw = HelloWorld.new 
             message = hw.say_hello 
             expect(message).to eq "Hello World!"
          end
          
       end
    end

 -then back in terminal:
 
    $ rspec spec spec\hello_world_spec.rb

 -which should put this:

    Finished in 0.002 sec (files took0101 seconds to load) 
    1 example, 0 failures


==============================================================
                Basic syntax
==============================================================
 -Here is the RSpec code again −

    describe HelloWorld do 
       context “When testing the HelloWorld class” do 
          
          it "The say_hello method should return 'Hello World'" do 
             hw = HelloWorld.new 
             message = hw.say_hello 
             expect(message).to eq "Hello World!" 
          end
          
       end 
    end

 -that is the main test section, the hello world function
  is whats getting tested
 -code being tested would normally be its own file
  as we see later how to do

**The describe Keyword**
 -The word "describe" is an RSpec keyword. It is used to 
  define an “Example Group”. 
 -an “Example Group” as a collection of tests. 
 -The describe keyword can take a class name and/or string
  argument. 
 -You also need to pass a block argument to describe,
  this will contain the individual tests, or as they are 
  known in RSpec, the “Examples”. 
 -The block is just a Ruby block designated by the 
  Ruby do/end keywords.

**The context Keyword**
 -The context keyword is similar to describe. 
 -It too can accept a class name and/or string argument. 
  and the code goes in a block
 -The idea of context is that it encloses tests of a 
  certain type.

 -For example: 

context “passing bad parameters to the foobar() method” 
context “passing valid parameters to the foobar() method” 
context “testing corner cases with the foobar() method”

 -The context keyword is not mandatory, but it helps to 
  add more details about the examples that it contains.

**The it Keyword**
 -The word it is another RSpec keyword which is used to 
  define an “Example”. 
 -to only pass a string and block argument. 
 -The string argument often uses the word “should” and
  describes what should happen inside the it block. 
 -the block contains the actual code that will test your
  program 

**The expect Keyword**
 -The expect keyword is used to define an “Expectation” 
  in RSpec. 
 -This is a verification step where we check
  that a specific expected condition has been met.

    expect(message).to eql "Hello World!"
 
 -as you can see RSpec tries to be read aloud easily


**The to keyword**
 -The to keyword is used as part of expect statements. 
 -Note that you can also use the not_to keyword 
  to express the opposite You can see that to is used with a dot, expect(message).to, because it actually just a regular Ruby method. In fact, all of the RSpec keywords are really just Ruby methods.

The eql keyword
The eql keyword is a special RSpec keyword called a Matcher. You use Matchers to specify what type of condition you are testing to be true (or false).

In our HelloWorld expect statement, it is clear that eql means string equality. Note that, there are different types of equality operators in Ruby and consequently different corresponding Matchers in RSpec. We will explore the many different types of Matchers in a later section.


/
/
/
/
/
/
/
/
/
/
/


In this chapter, we will create a new Ruby class, save it in its own file and create a separate spec file to test this class.

First, in our new class, it is called StringAnalyzer. It’s a simple class that, you guessed it, analyzes strings. Our class has only one method has_vowels? which as its names suggests, returns true if a string contains vowels and false if it doesn’t. Here’s the implementation for StringAnalyzer −

class StringAnalyzer 
   def has_vowels?(str) 
      !!(str =~ /[aeio]+/i) 
   end 
end
If you followed the HelloWorld section, you created a folder called C:\rspec_tutorial\spec.

Delete the hello_world.rb file if you have it and save the StringAnalyzer code above to a file called string_analyzer.rb in the C:\rspec_tutorial\spec folder.

Here is the source for our spec file to test StringAnalyzer −

require 'string_analyzer' 

describe StringAnalyzer do 
   context "With valid input" do 
      
      it "should detect when a string contains vowels" do 
         sa = StringAnalyzer.new 
         test_string = 'uuu' 
         expect(sa.has_vowels? test_string).to be true 
      end 
		
      it "should detect when a string doesn't contain vowels" do 
         sa = StringAnalyzer.new 
         test_string = 'bcdfg' 
         expect(sa.has_vowels? test_string).to be false
      end 
      
   end 
end
Save this in the same spec directory, giving it the name string_analyzer_test.rb.

In your cmd.exe window, cd to the C:\rspec_tutorial folder and run this command: dir spec

You should see the following −

Directory of C:\rspec_tutorial\spec

09/13/2015 08:22 AM  <DIR>    .
09/13/2015 08:22 AM  <DIR>    ..
09/12/2015 11:44 PM                 81 string_analyzer.rb
09/12/2015 11:46 PM              451 string_analyzer_test.rb
Now we’re going to run our tests, run this command: rspec spec

When you pass the name of a folder to rspec, it runs all of the spec files inside of the folder. You should see this result −

No examples found.

Finished in 0 seconds (files took 0.068 seconds to load)
0 examples, 0 failures
The reason that this happened is that, by default, rspec only runs files whose names end in “_spec.rb”. Rename string_analyzer_test.rb to string_analyzer_spec.rb. You can do that easily by running this command −

ren spec\string_analyzer_test.rb string_analyzer_spec.rb
Now, run rspec spec again, you should see output that looks like this −

F.
Failures:

   1) StringAnalyzer With valid input should detect when a string contains vowels
      Failure/Error: expect(sa.has_vowels? test_string).to be true 
         expected true
            got false
      # ./spec/string_analyzer_spec.rb:9:in `block (3 levels) in <top (required)>'

Finished in 0.015 seconds (files took 0.12201 seconds to load)
2 examples, 1 failure

Failed examples:
rspec ./spec/string_analyzer_spec.rb:6 # StringAnalyzer With valid 
   input should detect when a string contains vowels
Do you see what just happened? Our spec failed because we have a bug in 
   StringAnalyzer. The bug is simple to fix, open up string_analyzer.rb
   in a text editor and change this line:
!!(str =~ /[aeio]+/i)
to this:
!!(str =~ /[aeiou]+/i)
Now, save the changes you just made in string_analyizer.rb and run the rspec spec command again, you should now see output that looks like −

..
Finished in 0.002 seconds (files took 0.11401 seconds to load)
2 examples, 0 failures
Congratulations, the examples (tests) in your spec file are now passing. We fixed a bug in the regular expression which has vowels method but our tests are far from complete.

It would make sense to add more examples that tests various types of input strings with the has vowels method.

The following table shows some of the permutations that could be added in new Examples (it blocks)

Input string	Description	Expected result with has_vowels?
‘aaa’, ‘eee’, ‘iii’, ‘o’	Only one vowel and no other letters.	true
‘abcefg’	‘At least one vowel and some consonants’	true
‘mnklp’	Only consonants.	false
‘’	Empty string (no letters)	false
‘abcde55345&??’	Vowels, consonants, numbers and punctuation characters.	true
‘423432%%%^&’	Numbers and punctuation characters only.	false
‘AEIOU’	Upper case vowels only.	true
‘AeiOuuuA’	Upper case and lower vowels only.	true
‘AbCdEfghI’	Upper and lower case vowels and consonants.	true
‘BCDFG’	Upper case consonants only.	false
‘ ‘	Whitespace characters only.	false
It is up to you to decide, which examples to add to your spec file. There are many conditions to test for, you need to determine what subset of conditions is most important and tests your code the best.

The rspec command offers many different options, to see them all, type rspec -help. The following table lists the most popular options and describes what they do.

Sr.No.	Option/flag & Description
1	
-I PATH

Adds PATH to the load (require) path that rspec uses when looking for Ruby source files.

2	
-r, --require PATH

Adds a specific source file to be required in your spec. file(s).

3	
--fail-fast

With this option, rspec will stop running specs after the first Example fails. By default, rspec runs all specified spec files, no matter how many failures there are.

4	
-f, --format FORMATTER

This option allows you to specify different output formats. See the section on Formatters for more details about output formats.

5	
-o, --out FILE

This option directs rspec to write the test results to the output file FILE instead of to standard out.

6	
-c, --color

Enables color in rspec’s output. Successful Example results will display in green text, failures will print in red text.

7	
-b, --backtrace

Displays full error backtraces in rspec’s output.

8	
-w, --warnings

Displays Ruby warnings in rspec’s output.

9	
-P, --pattern PATTERN

Load and run spec files that match the pattern PATTERN. For example, if you pass -p “*.rb”, rspec will run all Ruby files, not just the ones that end in “_spec.rb”.

10	
-e, --example STRING

This option directs rspec to run all Examples that contain the text STRING in their descriptions.

11	
-t, --tag TAG

With this option, rspec will only run examples that contain the tag TAG. Note that TAG is specified as a Ruby symbol. See the section on RSpec Tags for more details.



/

/
/
/
/
/
/
/ 
MATCHERS 

eq	
Passes when actual == expected	
expect(actual).to eq expected

eql	
Passes when actual.eql?(expected)	
expect(actual).to eql expected

be	
Passes when actual.equal?(expected)
expect(actual).to be expected


