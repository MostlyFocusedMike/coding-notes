TABLE OF CONTENTS 


1SSSS    DAY 1 NOTES 
2SSSS    DAY 2 NOTES 
3SSSS    DAY 3 NOTES
5SSSS    DAY 5 NOTES
6SSSS    1st weekend hw


==============================================================
1SSSS    DAY 1 NOTES 
==============================================================
**video lectures** 
 -lectures are recorded and can be accessed later 


**sandwhich pattern** 
 -do not do this 

    def method 
      result = nil
      
      # a bunch of code 

      result
    end 


**red,green,refactor**
 -when writing code with rspec, firs you want to turn 
  the red fail lines into green passing lines, and only 
  then do you worry about refactoring for elegance

TODOS
 [CHECK] -RSPEC --fail-fast 
 [CHECK] -using * with strings 
 [CHECK] - def between select and find_all
 [CHECK] - #respond_to?


**resources** 
https://learn.co/tracks/web-development-immersive-2-0-module-one/introduction/logistics/campus-reference-materials
 -here are several new resources 

 -here is a series on product management
  https://www.youtube.com/playlist?list=PLJqijKi-heknXOAeVAy6w18LRmZtZUsgn
 
 -here are all the recorded guest lectures:
  https://www.youtube.com/playlist?list=PLJqijKi-hekkiQeHO0U1B-B_0ipApHI1c

 -and here are several women in tech playlists
  https://www.youtube.com/playlist?list=PLJqijKi-hekk7_lrwzaMHdZLpOxpEjSwv
  https://www.youtube.com/playlist?list=PLJqijKi-hekmciERuRcHJR507HMAEWAMH




==============================================================
2SSSS    DAY 2 NOTES 
==============================================================
**what are gems?**
 -the good gems to use are 
  
    rest-client
    JSON

 -to look up gems, do rubygems.org

**learn schedule**
 -your learnco homepage has the week's schedule and in the c
  curriculum tab should have the day's schedule

TODO 
[ ] -brief lookup of RESTful APIs  
[ ] -google books api lookup
[x]-using ranges to get slices of arrays 
[X]-download slack app on phone




==============================================================
3SSSS    DAY 3 NOTES
==============================================================
TODO 
[X] -explain private methods




==============================================================
4SSSS   DAY 4 NOTES 
==============================================================
TODO
[ ] -research exactly how gems works and the bundle install gem
[ ] -play with a class method that modifes all instances 
[ ] -what is ruby static variables
[ ] -how to initialize an object has_many belongs to relations






==============================================================
5SSSS    DAY 5 NOTES
==============================================================
TODO
[ ] -check main notes for TODOs
[ ] -ensure that you have single source notes in many object 
[ ] -notes on the many to many relationship
[ ] -update section on the importance of runners and how they
     link up many files into one space 
[ ] -fix it so that you say initializing a belongs to object 
     with the has many object in it is the better way to do it
[ ] -class constants vs class variables, the constants add an
     extra layer of protection to prevent reassignment, the 
     scope and instance objects access and everything else are
     the same value 
[ ] -constants are available anywhere within their SUB scopes
     so in the main scope, all methods have access to it 
     but in each methods constants can't be accessed from the 
     main scope (one scope up) 
[ ] -look up memoization

-find and select default to truthiness in the block if no
  comparison operator is given
[ ] -adding default variables using hashes and fetch 





==============================================================
6SSSS    1st weekend hw
==============================================================
NOTES: 
 -sql GROUP BY defaults to ascending order of the thing it is
  grouping by, so if it's text, it's alpha, ints is numerical
 -GROUP BY ... HAVING was invented becuase WHERE statements 
  can't support aggregate functions like COUNT

==============================================================
???SSSS  notes
==============================================================
-CRUD create, read, update, delete 
 -create is reate table and insert 
 -read is gonna be like select
 -update is update 
 -and delete is delete from and drop
 -these four functions are basically what every application
  does ever 

*define SQL
*sqlite vs sqlite3
*explore data with sqlite3 
*perform CRUD actions on table 
*perform CRUD across tables

DAYNOTE
TODO
 -ruby file paths know to look for files? 
 -learn how to integrate sql and ruby
 -SQL how treats white space is that it just ignores it 
  until it hits another word 
 -ruby sql ; is optional if one statment, it is required
  if you do more than one
 -ruby will create new db if not created already
 -sqlite3 foriegn key an no delete thing
 -are table names case sensitive YES




==============================================================
gems2SSSS    bundle install and gem files
==============================================================

**gemfile**
 -tells ruby what dependencies the project has

    source "http://rubygems.org"

    gem "sqlite3"
    gem "pry"

 -that's a very simple gem file 
 -that source is the ruby gem main repo and tells ruby
  where to get the gems
  -that site also has al the docs and bug trackers 
 -now the bundle install looks for this file, then downloads
  any of the gems (or specific versions of gems) to your
  computer so the files will run
   -the source can be links to other places like github 
 -then it will resolve the dependencies
  -each gem might depend on another unlisted gem, so if 
   that is the case, bundle will install them as well
  -bundle info GEM-NAME will show you where it was installed
   and all gems are installed globally
 -when it is done, bundle install creates a gemlock file, 
  which shows you where each gem came from and what, if any
  dependencies it also loaded
 -you do have to actually gem install bundler if you don't 
  have it, think of it like a package manager
 -include it in all your github code for eas of use
 -TODO
  -is Gemfile.rb case sensitive
 




==============================================================
folSSSS    Folder structure 
==============================================================
**basic structure**
 bin/
  -run.rb
config/
  -environment.rb
db/
  -music.rb
lib/
 **main program files here**
Gemfile.rb
Gemfile.lock
README.md
 
 -our bin/ will contain our runner file and anything else 
  needed ot actually run the file 
 -config/ is environment.rb contains and matches all 
  the require relatives and file loading that we need for
  our program, this file is then required in our runner
 -inside environment.rb: 

    requrie 'bundler'
    Bundler.require
 
 -what Bundler.require does is save us from having to do 
    
    require 'each-individual-gem'

 -so it's a time saver   
 -and lib is where your program files are stored




==============================================================
22SSSS     DAY 2 WEEK 2 
==============================================================
TODO
 -mass assignment 
 
 -responds_to?




==============================================================
23SSSS     DAY 3 WEEK 2
==============================================================
TODO
 -inheritance class constants allows for overwriting
 -class variables however would be overwritten for ALL 
  classes everywhere at once whenever it is reset in any 
  level of the class

 ORM conventions: 
    -new = make object in memory
    -save = put object in database 
    -create = put object in memory and db at once 

 the parent class in ORM with all the standard actions 
 is generally called generic_model.rb 
 -it is in a module now, but it could simply be inherited from 
  a class, not always a class in a module 

    module GenericRecord 
      class Base 
        def self.table_name 
            # create new table name from class 
        end 
        
        def self.delete(id)
          # delete the thing from the table  
        end 
    
        def self.all
          # return a list of memory objects based of table
          # rows 
        end 

        def self.column_name
          # return all the table columns 
          # TODO PRAGMA is a sqlite3 meta data
          # this is how you get instance column names at the 
          # class level
          sql = "PRAGMA table_info(#{table_name})
          # this returns a lot of stuf "pk" is primary key
          results = DB[:conn].execute(sql)
          # this is an array of hashes, each hash is a column
          results.map do |column|
            column.name
          end
        end 

        def self.primary_key
          sql = "PRAGMA table_info(#{table_name})
          results = DB[:conn].execute(sql)
          results.find do |columns|
            column.pk == 1 
          end["name"]

        end

        def initialize(attributes)
          # set up any method possible
          key = self.primary_key.to_sym # we're storing them
                                        # as symbols, but we
                                        # could use str, whic
                                        # wouldn't need 
                                        # conversion
          val = attributes[key]
          self.instance_variable_set("@{key}".to_sym, val)
        end

        private 

        def mass_assign_attributes(attributes)
            # create mass assignments
        end 
      end 
    end
